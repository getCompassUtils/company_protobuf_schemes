// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: proto/go_company.proto

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// формат запроса для Rating.IncDayRatingEventCountForUser
type RatingIncDayRatingEventCountForUserRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Year      int64  `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	Day       int64  `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	Event     string `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	Inc       int64  `protobuf:"varint,5,opt,name=inc,proto3" json:"inc,omitempty"`
	CompanyId int64  `protobuf:"varint,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) Reset() {
	*x = RatingIncDayRatingEventCountForUserRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingIncDayRatingEventCountForUserRequestStruct) ProtoMessage() {}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingIncDayRatingEventCountForUserRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingIncDayRatingEventCountForUserRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{0}
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) GetInc() int64 {
	if x != nil {
		return x.Inc
	}
	return 0
}

func (x *RatingIncDayRatingEventCountForUserRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для Rating.IncDayRatingEventCountForUser
type RatingIncDayRatingEventCountForUserResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RatingIncDayRatingEventCountForUserResponseStruct) Reset() {
	*x = RatingIncDayRatingEventCountForUserResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingIncDayRatingEventCountForUserResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingIncDayRatingEventCountForUserResponseStruct) ProtoMessage() {}

func (x *RatingIncDayRatingEventCountForUserResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingIncDayRatingEventCountForUserResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingIncDayRatingEventCountForUserResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{1}
}

// формат запроса для rating.Inc
type RatingIncRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event     string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Inc       int64  `protobuf:"varint,3,opt,name=inc,proto3" json:"inc,omitempty"`
	CompanyId int64  `protobuf:"varint,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingIncRequestStruct) Reset() {
	*x = RatingIncRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingIncRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingIncRequestStruct) ProtoMessage() {}

func (x *RatingIncRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingIncRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingIncRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{2}
}

func (x *RatingIncRequestStruct) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *RatingIncRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RatingIncRequestStruct) GetInc() int64 {
	if x != nil {
		return x.Inc
	}
	return 0
}

func (x *RatingIncRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для rating.Inc
type RatingIncResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RatingIncResponseStruct) Reset() {
	*x = RatingIncResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingIncResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingIncResponseStruct) ProtoMessage() {}

func (x *RatingIncResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingIncResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingIncResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{3}
}

// формат запроса для rating.Get
type RatingGetRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event         string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	FromDateAt    int64  `protobuf:"varint,2,opt,name=from_date_at,json=fromDateAt,proto3" json:"from_date_at,omitempty"`
	ToDateAt      int64  `protobuf:"varint,3,opt,name=to_date_at,json=toDateAt,proto3" json:"to_date_at,omitempty"`
	TopListOffset int64  `protobuf:"varint,4,opt,name=top_list_offset,json=topListOffset,proto3" json:"top_list_offset,omitempty"`
	TopListCount  int64  `protobuf:"varint,5,opt,name=top_list_count,json=topListCount,proto3" json:"top_list_count,omitempty"`
	CompanyId     int64  `protobuf:"varint,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingGetRequestStruct) Reset() {
	*x = RatingGetRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetRequestStruct) ProtoMessage() {}

func (x *RatingGetRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingGetRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{4}
}

func (x *RatingGetRequestStruct) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *RatingGetRequestStruct) GetFromDateAt() int64 {
	if x != nil {
		return x.FromDateAt
	}
	return 0
}

func (x *RatingGetRequestStruct) GetToDateAt() int64 {
	if x != nil {
		return x.ToDateAt
	}
	return 0
}

func (x *RatingGetRequestStruct) GetTopListOffset() int64 {
	if x != nil {
		return x.TopListOffset
	}
	return 0
}

func (x *RatingGetRequestStruct) GetTopListCount() int64 {
	if x != nil {
		return x.TopListCount
	}
	return 0
}

func (x *RatingGetRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// структура описания топа
type TopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Position   int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Count      int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	IsDisabled int64 `protobuf:"varint,4,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
}

func (x *TopItem) Reset() {
	*x = TopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopItem) ProtoMessage() {}

func (x *TopItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopItem.ProtoReflect.Descriptor instead.
func (*TopItem) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{5}
}

func (x *TopItem) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TopItem) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TopItem) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TopItem) GetIsDisabled() int64 {
	if x != nil {
		return x.IsDisabled
	}
	return 0
}

// формат ответа для rating.Get
type RatingGetResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count     int64      `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	UpdatedAt int64      `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TopList   []*TopItem `protobuf:"bytes,3,rep,name=top_list,json=topList,proto3" json:"top_list,omitempty"`
	HasNext   int64      `protobuf:"varint,4,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *RatingGetResponseStruct) Reset() {
	*x = RatingGetResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetResponseStruct) ProtoMessage() {}

func (x *RatingGetResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingGetResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{6}
}

func (x *RatingGetResponseStruct) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RatingGetResponseStruct) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RatingGetResponseStruct) GetTopList() []*TopItem {
	if x != nil {
		return x.TopList
	}
	return nil
}

func (x *RatingGetResponseStruct) GetHasNext() int64 {
	if x != nil {
		return x.HasNext
	}
	return 0
}

// структура для rating.GetByUserId
type UserRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GeneralPosition int64            `protobuf:"varint,2,opt,name=general_position,json=generalPosition,proto3" json:"general_position,omitempty"`
	Year            int64            `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	EventCountList  map[string]int64 `protobuf:"bytes,4,rep,name=event_count_list,json=eventCountList,proto3" json:"event_count_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GeneralCount    int64            `protobuf:"varint,5,opt,name=general_count,json=generalCount,proto3" json:"general_count,omitempty"`
	UpdatedAt       int64            `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CompanyId       int64            `protobuf:"varint,7,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *UserRating) Reset() {
	*x = UserRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRating) ProtoMessage() {}

func (x *UserRating) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRating.ProtoReflect.Descriptor instead.
func (*UserRating) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{7}
}

func (x *UserRating) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRating) GetGeneralPosition() int64 {
	if x != nil {
		return x.GeneralPosition
	}
	return 0
}

func (x *UserRating) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *UserRating) GetEventCountList() map[string]int64 {
	if x != nil {
		return x.EventCountList
	}
	return nil
}

func (x *UserRating) GetGeneralCount() int64 {
	if x != nil {
		return x.GeneralCount
	}
	return 0
}

func (x *UserRating) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserRating) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат запроса для rating.GetByUserId
type RatingGetByUserIdRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Year            int64   `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	FromDateAtList  []int64 `protobuf:"varint,3,rep,packed,name=from_date_at_list,json=fromDateAtList,proto3" json:"from_date_at_list,omitempty"`
	ToDateAtList    []int64 `protobuf:"varint,4,rep,packed,name=to_date_at_list,json=toDateAtList,proto3" json:"to_date_at_list,omitempty"`
	IsFromCacheList []int64 `protobuf:"varint,5,rep,packed,name=is_from_cache_list,json=isFromCacheList,proto3" json:"is_from_cache_list,omitempty"`
	CompanyId       int64   `protobuf:"varint,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingGetByUserIdRequestStruct) Reset() {
	*x = RatingGetByUserIdRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetByUserIdRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetByUserIdRequestStruct) ProtoMessage() {}

func (x *RatingGetByUserIdRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetByUserIdRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingGetByUserIdRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{8}
}

func (x *RatingGetByUserIdRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RatingGetByUserIdRequestStruct) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RatingGetByUserIdRequestStruct) GetFromDateAtList() []int64 {
	if x != nil {
		return x.FromDateAtList
	}
	return nil
}

func (x *RatingGetByUserIdRequestStruct) GetToDateAtList() []int64 {
	if x != nil {
		return x.ToDateAtList
	}
	return nil
}

func (x *RatingGetByUserIdRequestStruct) GetIsFromCacheList() []int64 {
	if x != nil {
		return x.IsFromCacheList
	}
	return nil
}

func (x *RatingGetByUserIdRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для rating.GetByUserId
type RatingGetByUserIdResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GeneralPosition int64            `protobuf:"varint,2,opt,name=general_position,json=generalPosition,proto3" json:"general_position,omitempty"`
	Year            int64            `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	EventCountList  map[string]int64 `protobuf:"bytes,4,rep,name=event_count_list,json=eventCountList,proto3" json:"event_count_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GeneralCount    int64            `protobuf:"varint,5,opt,name=general_count,json=generalCount,proto3" json:"general_count,omitempty"`
	UpdatedAt       int64            `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RatingGetByUserIdResponseStruct) Reset() {
	*x = RatingGetByUserIdResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetByUserIdResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetByUserIdResponseStruct) ProtoMessage() {}

func (x *RatingGetByUserIdResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetByUserIdResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingGetByUserIdResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{9}
}

func (x *RatingGetByUserIdResponseStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RatingGetByUserIdResponseStruct) GetGeneralPosition() int64 {
	if x != nil {
		return x.GeneralPosition
	}
	return 0
}

func (x *RatingGetByUserIdResponseStruct) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RatingGetByUserIdResponseStruct) GetEventCountList() map[string]int64 {
	if x != nil {
		return x.EventCountList
	}
	return nil
}

func (x *RatingGetByUserIdResponseStruct) GetGeneralCount() int64 {
	if x != nil {
		return x.GeneralCount
	}
	return 0
}

func (x *RatingGetByUserIdResponseStruct) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type RatingGetByUserIdListResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRatingList []*RatingGetByUserIdResponseStruct `protobuf:"bytes,1,rep,name=user_rating_list,json=userRatingList,proto3" json:"user_rating_list,omitempty"`
}

func (x *RatingGetByUserIdListResponseStruct) Reset() {
	*x = RatingGetByUserIdListResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetByUserIdListResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetByUserIdListResponseStruct) ProtoMessage() {}

func (x *RatingGetByUserIdListResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetByUserIdListResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingGetByUserIdListResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{10}
}

func (x *RatingGetByUserIdListResponseStruct) GetUserRatingList() []*RatingGetByUserIdResponseStruct {
	if x != nil {
		return x.UserRatingList
	}
	return nil
}

// формат запроса для rating.GetEventCountByInterval
type RatingGetEventCountByIntervalRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Year       int64  `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	FromDateAt int64  `protobuf:"varint,3,opt,name=from_date_at,json=fromDateAt,proto3" json:"from_date_at,omitempty"`
	ToDateAt   int64  `protobuf:"varint,4,opt,name=to_date_at,json=toDateAt,proto3" json:"to_date_at,omitempty"`
	CompanyId  int64  `protobuf:"varint,5,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingGetEventCountByIntervalRequestStruct) Reset() {
	*x = RatingGetEventCountByIntervalRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetEventCountByIntervalRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetEventCountByIntervalRequestStruct) ProtoMessage() {}

func (x *RatingGetEventCountByIntervalRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetEventCountByIntervalRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingGetEventCountByIntervalRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{11}
}

func (x *RatingGetEventCountByIntervalRequestStruct) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *RatingGetEventCountByIntervalRequestStruct) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RatingGetEventCountByIntervalRequestStruct) GetFromDateAt() int64 {
	if x != nil {
		return x.FromDateAt
	}
	return 0
}

func (x *RatingGetEventCountByIntervalRequestStruct) GetToDateAt() int64 {
	if x != nil {
		return x.ToDateAt
	}
	return 0
}

func (x *RatingGetEventCountByIntervalRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// структура для ответа rating.GetEventCountByInterval
type EventCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Day   int64 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EventCount) Reset() {
	*x = EventCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCount) ProtoMessage() {}

func (x *EventCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCount.ProtoReflect.Descriptor instead.
func (*EventCount) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{12}
}

func (x *EventCount) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *EventCount) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *EventCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// формат ответа для rating.GetEventCountByInterval
type RatingGetEventCountByIntervalResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCountList []*EventCount `protobuf:"bytes,1,rep,name=event_count_list,json=eventCountList,proto3" json:"event_count_list,omitempty"`
}

func (x *RatingGetEventCountByIntervalResponseStruct) Reset() {
	*x = RatingGetEventCountByIntervalResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetEventCountByIntervalResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetEventCountByIntervalResponseStruct) ProtoMessage() {}

func (x *RatingGetEventCountByIntervalResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetEventCountByIntervalResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingGetEventCountByIntervalResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{13}
}

func (x *RatingGetEventCountByIntervalResponseStruct) GetEventCountList() []*EventCount {
	if x != nil {
		return x.EventCountList
	}
	return nil
}

// формат запроса для rating.GetGeneralEventCountByInterval
type RatingGetGeneralEventCountByIntervalRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year       int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	FromDateAt int64 `protobuf:"varint,2,opt,name=from_date_at,json=fromDateAt,proto3" json:"from_date_at,omitempty"`
	ToDateAt   int64 `protobuf:"varint,3,opt,name=to_date_at,json=toDateAt,proto3" json:"to_date_at,omitempty"`
	CompanyId  int64 `protobuf:"varint,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingGetGeneralEventCountByIntervalRequestStruct) Reset() {
	*x = RatingGetGeneralEventCountByIntervalRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetGeneralEventCountByIntervalRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetGeneralEventCountByIntervalRequestStruct) ProtoMessage() {}

func (x *RatingGetGeneralEventCountByIntervalRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetGeneralEventCountByIntervalRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingGetGeneralEventCountByIntervalRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{14}
}

func (x *RatingGetGeneralEventCountByIntervalRequestStruct) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RatingGetGeneralEventCountByIntervalRequestStruct) GetFromDateAt() int64 {
	if x != nil {
		return x.FromDateAt
	}
	return 0
}

func (x *RatingGetGeneralEventCountByIntervalRequestStruct) GetToDateAt() int64 {
	if x != nil {
		return x.ToDateAt
	}
	return 0
}

func (x *RatingGetGeneralEventCountByIntervalRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для rating.GetGeneralEventCountByInterval
type RatingGetGeneralEventCountByIntervalResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventCountList []*EventCount `protobuf:"bytes,1,rep,name=event_count_list,json=eventCountList,proto3" json:"event_count_list,omitempty"`
}

func (x *RatingGetGeneralEventCountByIntervalResponseStruct) Reset() {
	*x = RatingGetGeneralEventCountByIntervalResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetGeneralEventCountByIntervalResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetGeneralEventCountByIntervalResponseStruct) ProtoMessage() {}

func (x *RatingGetGeneralEventCountByIntervalResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetGeneralEventCountByIntervalResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingGetGeneralEventCountByIntervalResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{15}
}

func (x *RatingGetGeneralEventCountByIntervalResponseStruct) GetEventCountList() []*EventCount {
	if x != nil {
		return x.EventCountList
	}
	return nil
}

// формат запроса для rating.ForceSaveCache
type RatingForceSaveCacheRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingForceSaveCacheRequestStruct) Reset() {
	*x = RatingForceSaveCacheRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingForceSaveCacheRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingForceSaveCacheRequestStruct) ProtoMessage() {}

func (x *RatingForceSaveCacheRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingForceSaveCacheRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingForceSaveCacheRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{16}
}

func (x *RatingForceSaveCacheRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для rating.ForceSaveCache
type RatingForceSaveCacheResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RatingForceSaveCacheResponseStruct) Reset() {
	*x = RatingForceSaveCacheResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingForceSaveCacheResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingForceSaveCacheResponseStruct) ProtoMessage() {}

func (x *RatingForceSaveCacheResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingForceSaveCacheResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingForceSaveCacheResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{17}
}

// формат запроса для rating.SetUserBlockInSystemStatus
type RatingSetUserBlockInSystemStatusRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status    int64 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	CompanyId int64 `protobuf:"varint,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingSetUserBlockInSystemStatusRequestStruct) Reset() {
	*x = RatingSetUserBlockInSystemStatusRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingSetUserBlockInSystemStatusRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingSetUserBlockInSystemStatusRequestStruct) ProtoMessage() {}

func (x *RatingSetUserBlockInSystemStatusRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingSetUserBlockInSystemStatusRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingSetUserBlockInSystemStatusRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{18}
}

func (x *RatingSetUserBlockInSystemStatusRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RatingSetUserBlockInSystemStatusRequestStruct) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RatingSetUserBlockInSystemStatusRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для rating.SetUserBlockInSystemStatus
type RatingSetUserBlockInSystemStatusResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RatingSetUserBlockInSystemStatusResponseStruct) Reset() {
	*x = RatingSetUserBlockInSystemStatusResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingSetUserBlockInSystemStatusResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingSetUserBlockInSystemStatusResponseStruct) ProtoMessage() {}

func (x *RatingSetUserBlockInSystemStatusResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingSetUserBlockInSystemStatusResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingSetUserBlockInSystemStatusResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{19}
}

// формат запроса для rating.RatingGetUserStatus
type RatingGetUserStatusRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingGetUserStatusRequestStruct) Reset() {
	*x = RatingGetUserStatusRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetUserStatusRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetUserStatusRequestStruct) ProtoMessage() {}

func (x *RatingGetUserStatusRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetUserStatusRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingGetUserStatusRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{20}
}

func (x *RatingGetUserStatusRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RatingGetUserStatusRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для rating.RatingGetUserStatus
type RatingGetUserStatusResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RatingGetUserStatusResponseStruct) Reset() {
	*x = RatingGetUserStatusResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetUserStatusResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetUserStatusResponseStruct) ProtoMessage() {}

func (x *RatingGetUserStatusResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetUserStatusResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingGetUserStatusResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{21}
}

func (x *RatingGetUserStatusResponseStruct) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// формат запроса для rating.GetListByDay
type RatingGetListByDayRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Day       int64 `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	CompanyId int64 `protobuf:"varint,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RatingGetListByDayRequestStruct) Reset() {
	*x = RatingGetListByDayRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetListByDayRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetListByDayRequestStruct) ProtoMessage() {}

func (x *RatingGetListByDayRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetListByDayRequestStruct.ProtoReflect.Descriptor instead.
func (*RatingGetListByDayRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{22}
}

func (x *RatingGetListByDayRequestStruct) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *RatingGetListByDayRequestStruct) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *RatingGetListByDayRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type UserDayStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64            `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Data   map[string]int64 `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UserDayStats) Reset() {
	*x = UserDayStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDayStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDayStats) ProtoMessage() {}

func (x *UserDayStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDayStats.ProtoReflect.Descriptor instead.
func (*UserDayStats) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{23}
}

func (x *UserDayStats) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserDayStats) GetData() map[string]int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

// формат ответа для rating.GetListByDay
type RatingGetListByDayResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDayStatsList []*UserDayStats `protobuf:"bytes,1,rep,name=user_day_stats_list,json=userDayStatsList,proto3" json:"user_day_stats_list,omitempty"`
}

func (x *RatingGetListByDayResponseStruct) Reset() {
	*x = RatingGetListByDayResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatingGetListByDayResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatingGetListByDayResponseStruct) ProtoMessage() {}

func (x *RatingGetListByDayResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatingGetListByDayResponseStruct.ProtoReflect.Descriptor instead.
func (*RatingGetListByDayResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{24}
}

func (x *RatingGetListByDayResponseStruct) GetUserDayStatsList() []*UserDayStats {
	if x != nil {
		return x.UserDayStatsList
	}
	return nil
}

// формат структуры версии события
type EventVersionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EventVersionItem) Reset() {
	*x = EventVersionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventVersionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventVersionItem) ProtoMessage() {}

func (x *EventVersionItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventVersionItem.ProtoReflect.Descriptor instead.
func (*EventVersionItem) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{25}
}

func (x *EventVersionItem) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *EventVersionItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConversationReactionStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationMap          string              `protobuf:"bytes,1,opt,name=conversation_map,json=conversationMap,proto3" json:"conversation_map,omitempty"`
	MessageMap               string              `protobuf:"bytes,2,opt,name=message_map,json=messageMap,proto3" json:"message_map,omitempty"`
	BlockId                  int64               `protobuf:"varint,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockMessageIndex        int64               `protobuf:"varint,4,opt,name=block_message_index,json=blockMessageIndex,proto3" json:"block_message_index,omitempty"`
	ConversationMessageIndex int64               `protobuf:"varint,5,opt,name=conversation_message_index,json=conversationMessageIndex,proto3" json:"conversation_message_index,omitempty"`
	ReactionUniq             int64               `protobuf:"varint,6,opt,name=reaction_uniq,json=reactionUniq,proto3" json:"reaction_uniq,omitempty"`
	ShardId                  string              `protobuf:"bytes,7,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	TableId                  int64               `protobuf:"varint,8,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	UserId                   int64               `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UpdatedAtMs              int64               `protobuf:"varint,10,opt,name=updated_at_ms,json=updatedAtMs,proto3" json:"updated_at_ms,omitempty"`
	WsUserList               string              `protobuf:"bytes,11,opt,name=ws_user_list,json=wsUserList,proto3" json:"ws_user_list,omitempty"`
	EventVersionList         []*EventVersionItem `protobuf:"bytes,12,rep,name=event_version_list,json=eventVersionList,proto3" json:"event_version_list,omitempty"`
	WsUsers                  string              `protobuf:"bytes,13,opt,name=ws_users,json=wsUsers,proto3" json:"ws_users,omitempty"`
	IsWsEnabled              int64               `protobuf:"varint,14,opt,name=is_ws_enabled,json=isWsEnabled,proto3" json:"is_ws_enabled,omitempty"`
	ReactionName             string              `protobuf:"bytes,15,opt,name=reaction_name,json=reactionName,proto3" json:"reaction_name,omitempty"`
}

func (x *ConversationReactionStruct) Reset() {
	*x = ConversationReactionStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationReactionStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationReactionStruct) ProtoMessage() {}

func (x *ConversationReactionStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationReactionStruct.ProtoReflect.Descriptor instead.
func (*ConversationReactionStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{26}
}

func (x *ConversationReactionStruct) GetConversationMap() string {
	if x != nil {
		return x.ConversationMap
	}
	return ""
}

func (x *ConversationReactionStruct) GetMessageMap() string {
	if x != nil {
		return x.MessageMap
	}
	return ""
}

func (x *ConversationReactionStruct) GetBlockId() int64 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *ConversationReactionStruct) GetBlockMessageIndex() int64 {
	if x != nil {
		return x.BlockMessageIndex
	}
	return 0
}

func (x *ConversationReactionStruct) GetConversationMessageIndex() int64 {
	if x != nil {
		return x.ConversationMessageIndex
	}
	return 0
}

func (x *ConversationReactionStruct) GetReactionUniq() int64 {
	if x != nil {
		return x.ReactionUniq
	}
	return 0
}

func (x *ConversationReactionStruct) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ConversationReactionStruct) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ConversationReactionStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConversationReactionStruct) GetUpdatedAtMs() int64 {
	if x != nil {
		return x.UpdatedAtMs
	}
	return 0
}

func (x *ConversationReactionStruct) GetWsUserList() string {
	if x != nil {
		return x.WsUserList
	}
	return ""
}

func (x *ConversationReactionStruct) GetEventVersionList() []*EventVersionItem {
	if x != nil {
		return x.EventVersionList
	}
	return nil
}

func (x *ConversationReactionStruct) GetWsUsers() string {
	if x != nil {
		return x.WsUsers
	}
	return ""
}

func (x *ConversationReactionStruct) GetIsWsEnabled() int64 {
	if x != nil {
		return x.IsWsEnabled
	}
	return 0
}

func (x *ConversationReactionStruct) GetReactionName() string {
	if x != nil {
		return x.ReactionName
	}
	return ""
}

// формат запроса для reactions.AddInConversation
type ReactionsAddInConversationRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationReaction *ConversationReactionStruct `protobuf:"bytes,1,opt,name=conversation_reaction,json=conversationReaction,proto3" json:"conversation_reaction,omitempty"`
	CompanyId            int64                       `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ReactionsAddInConversationRequestStruct) Reset() {
	*x = ReactionsAddInConversationRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsAddInConversationRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsAddInConversationRequestStruct) ProtoMessage() {}

func (x *ReactionsAddInConversationRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsAddInConversationRequestStruct.ProtoReflect.Descriptor instead.
func (*ReactionsAddInConversationRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{27}
}

func (x *ReactionsAddInConversationRequestStruct) GetConversationReaction() *ConversationReactionStruct {
	if x != nil {
		return x.ConversationReaction
	}
	return nil
}

func (x *ReactionsAddInConversationRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для reactions.AddInConversation
type ReactionsAddInConversationResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReactionsAddInConversationResponseStruct) Reset() {
	*x = ReactionsAddInConversationResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsAddInConversationResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsAddInConversationResponseStruct) ProtoMessage() {}

func (x *ReactionsAddInConversationResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsAddInConversationResponseStruct.ProtoReflect.Descriptor instead.
func (*ReactionsAddInConversationResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{28}
}

// формат запроса для reactions.RemoveInConversation
type ReactionsRemoveInConversationRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationReaction *ConversationReactionStruct `protobuf:"bytes,1,opt,name=conversation_reaction,json=conversationReaction,proto3" json:"conversation_reaction,omitempty"`
	CompanyId            int64                       `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ReactionsRemoveInConversationRequestStruct) Reset() {
	*x = ReactionsRemoveInConversationRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsRemoveInConversationRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsRemoveInConversationRequestStruct) ProtoMessage() {}

func (x *ReactionsRemoveInConversationRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsRemoveInConversationRequestStruct.ProtoReflect.Descriptor instead.
func (*ReactionsRemoveInConversationRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{29}
}

func (x *ReactionsRemoveInConversationRequestStruct) GetConversationReaction() *ConversationReactionStruct {
	if x != nil {
		return x.ConversationReaction
	}
	return nil
}

func (x *ReactionsRemoveInConversationRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для reactions.RemoveInConversation
type ReactionsRemoveInConversationResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReactionsRemoveInConversationResponseStruct) Reset() {
	*x = ReactionsRemoveInConversationResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsRemoveInConversationResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsRemoveInConversationResponseStruct) ProtoMessage() {}

func (x *ReactionsRemoveInConversationResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsRemoveInConversationResponseStruct.ProtoReflect.Descriptor instead.
func (*ReactionsRemoveInConversationResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{30}
}

type ThreadReactionStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadMap          string              `protobuf:"bytes,1,opt,name=thread_map,json=threadMap,proto3" json:"thread_map,omitempty"`
	MessageMap         string              `protobuf:"bytes,2,opt,name=message_map,json=messageMap,proto3" json:"message_map,omitempty"`
	BlockId            int64               `protobuf:"varint,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockMessageIndex  int64               `protobuf:"varint,4,opt,name=block_message_index,json=blockMessageIndex,proto3" json:"block_message_index,omitempty"`
	ThreadMessageIndex int64               `protobuf:"varint,5,opt,name=thread_message_index,json=threadMessageIndex,proto3" json:"thread_message_index,omitempty"`
	ReactionUniq       int64               `protobuf:"varint,6,opt,name=reaction_uniq,json=reactionUniq,proto3" json:"reaction_uniq,omitempty"`
	ShardId            string              `protobuf:"bytes,7,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	TableId            int64               `protobuf:"varint,8,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	UserId             int64               `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UpdatedAtMs        int64               `protobuf:"varint,10,opt,name=updated_at_ms,json=updatedAtMs,proto3" json:"updated_at_ms,omitempty"`
	WsUserList         string              `protobuf:"bytes,11,opt,name=ws_user_list,json=wsUserList,proto3" json:"ws_user_list,omitempty"`
	EventVersionList   []*EventVersionItem `protobuf:"bytes,12,rep,name=event_version_list,json=eventVersionList,proto3" json:"event_version_list,omitempty"`
	WsUsers            string              `protobuf:"bytes,13,opt,name=ws_users,json=wsUsers,proto3" json:"ws_users,omitempty"`
	IsWsEnabled        int64               `protobuf:"varint,14,opt,name=is_ws_enabled,json=isWsEnabled,proto3" json:"is_ws_enabled,omitempty"`
	ReactionName       string              `protobuf:"bytes,15,opt,name=reaction_name,json=reactionName,proto3" json:"reaction_name,omitempty"`
}

func (x *ThreadReactionStruct) Reset() {
	*x = ThreadReactionStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadReactionStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadReactionStruct) ProtoMessage() {}

func (x *ThreadReactionStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadReactionStruct.ProtoReflect.Descriptor instead.
func (*ThreadReactionStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{31}
}

func (x *ThreadReactionStruct) GetThreadMap() string {
	if x != nil {
		return x.ThreadMap
	}
	return ""
}

func (x *ThreadReactionStruct) GetMessageMap() string {
	if x != nil {
		return x.MessageMap
	}
	return ""
}

func (x *ThreadReactionStruct) GetBlockId() int64 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *ThreadReactionStruct) GetBlockMessageIndex() int64 {
	if x != nil {
		return x.BlockMessageIndex
	}
	return 0
}

func (x *ThreadReactionStruct) GetThreadMessageIndex() int64 {
	if x != nil {
		return x.ThreadMessageIndex
	}
	return 0
}

func (x *ThreadReactionStruct) GetReactionUniq() int64 {
	if x != nil {
		return x.ReactionUniq
	}
	return 0
}

func (x *ThreadReactionStruct) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ThreadReactionStruct) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ThreadReactionStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ThreadReactionStruct) GetUpdatedAtMs() int64 {
	if x != nil {
		return x.UpdatedAtMs
	}
	return 0
}

func (x *ThreadReactionStruct) GetWsUserList() string {
	if x != nil {
		return x.WsUserList
	}
	return ""
}

func (x *ThreadReactionStruct) GetEventVersionList() []*EventVersionItem {
	if x != nil {
		return x.EventVersionList
	}
	return nil
}

func (x *ThreadReactionStruct) GetWsUsers() string {
	if x != nil {
		return x.WsUsers
	}
	return ""
}

func (x *ThreadReactionStruct) GetIsWsEnabled() int64 {
	if x != nil {
		return x.IsWsEnabled
	}
	return 0
}

func (x *ThreadReactionStruct) GetReactionName() string {
	if x != nil {
		return x.ReactionName
	}
	return ""
}

// формат запроса для reactions.AddInThread
type ReactionsAddInThreadRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadReaction *ThreadReactionStruct `protobuf:"bytes,1,opt,name=thread_reaction,json=threadReaction,proto3" json:"thread_reaction,omitempty"`
	CompanyId      int64                 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ReactionsAddInThreadRequestStruct) Reset() {
	*x = ReactionsAddInThreadRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsAddInThreadRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsAddInThreadRequestStruct) ProtoMessage() {}

func (x *ReactionsAddInThreadRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsAddInThreadRequestStruct.ProtoReflect.Descriptor instead.
func (*ReactionsAddInThreadRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{32}
}

func (x *ReactionsAddInThreadRequestStruct) GetThreadReaction() *ThreadReactionStruct {
	if x != nil {
		return x.ThreadReaction
	}
	return nil
}

func (x *ReactionsAddInThreadRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для reactions.AddInThread
type ReactionsAddInThreadResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReactionsAddInThreadResponseStruct) Reset() {
	*x = ReactionsAddInThreadResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsAddInThreadResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsAddInThreadResponseStruct) ProtoMessage() {}

func (x *ReactionsAddInThreadResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsAddInThreadResponseStruct.ProtoReflect.Descriptor instead.
func (*ReactionsAddInThreadResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{33}
}

// формат запроса для reactions.RemoveInThread
type ReactionsRemoveInThreadRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadReaction *ThreadReactionStruct `protobuf:"bytes,1,opt,name=thread_reaction,json=threadReaction,proto3" json:"thread_reaction,omitempty"`
	CompanyId      int64                 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ReactionsRemoveInThreadRequestStruct) Reset() {
	*x = ReactionsRemoveInThreadRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsRemoveInThreadRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsRemoveInThreadRequestStruct) ProtoMessage() {}

func (x *ReactionsRemoveInThreadRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsRemoveInThreadRequestStruct.ProtoReflect.Descriptor instead.
func (*ReactionsRemoveInThreadRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{34}
}

func (x *ReactionsRemoveInThreadRequestStruct) GetThreadReaction() *ThreadReactionStruct {
	if x != nil {
		return x.ThreadReaction
	}
	return nil
}

func (x *ReactionsRemoveInThreadRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для reactions.RemoveInThread
type ReactionsRemoveInThreadResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReactionsRemoveInThreadResponseStruct) Reset() {
	*x = ReactionsRemoveInThreadResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionsRemoveInThreadResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionsRemoveInThreadResponseStruct) ProtoMessage() {}

func (x *ReactionsRemoveInThreadResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionsRemoveInThreadResponseStruct.ProtoReflect.Descriptor instead.
func (*ReactionsRemoveInThreadResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{35}
}

// формат запроса для ReadMessageAdd
type ReadMessageAddRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId              int64  `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	EntityType             string `protobuf:"bytes,2,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	EntityMap              string `protobuf:"bytes,3,opt,name=entity_map,json=entityMap,proto3" json:"entity_map,omitempty"`
	UserId                 int64  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MessageMap             string `protobuf:"bytes,5,opt,name=message_map,json=messageMap,proto3" json:"message_map,omitempty"`
	EntityMessageIndex     int64  `protobuf:"varint,6,opt,name=entity_message_index,json=entityMessageIndex,proto3" json:"entity_message_index,omitempty"`
	MessageCreatedAt       int64  `protobuf:"varint,7,opt,name=message_created_at,json=messageCreatedAt,proto3" json:"message_created_at,omitempty"`
	ReadAt                 int64  `protobuf:"varint,8,opt,name=read_at,json=readAt,proto3" json:"read_at,omitempty"`
	TableShard             int32  `protobuf:"varint,9,opt,name=table_shard,json=tableShard,proto3" json:"table_shard,omitempty"`
	EntityMetaId           int64  `protobuf:"varint,10,opt,name=entity_meta_id,json=entityMetaId,proto3" json:"entity_meta_id,omitempty"`
	EntityKey              string `protobuf:"bytes,11,opt,name=entity_key,json=entityKey,proto3" json:"entity_key,omitempty"`
	MessageKey             string `protobuf:"bytes,12,opt,name=message_key,json=messageKey,proto3" json:"message_key,omitempty"`
	DbShard                int32  `protobuf:"varint,13,opt,name=db_shard,json=dbShard,proto3" json:"db_shard,omitempty"`
	IsForceShowParticipant bool   `protobuf:"varint,14,opt,name=is_force_show_participant,json=isForceShowParticipant,proto3" json:"is_force_show_participant,omitempty"`
}

func (x *ReadMessageAddRequestStruct) Reset() {
	*x = ReadMessageAddRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMessageAddRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMessageAddRequestStruct) ProtoMessage() {}

func (x *ReadMessageAddRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMessageAddRequestStruct.ProtoReflect.Descriptor instead.
func (*ReadMessageAddRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{36}
}

func (x *ReadMessageAddRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *ReadMessageAddRequestStruct) GetEntityMap() string {
	if x != nil {
		return x.EntityMap
	}
	return ""
}

func (x *ReadMessageAddRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetMessageMap() string {
	if x != nil {
		return x.MessageMap
	}
	return ""
}

func (x *ReadMessageAddRequestStruct) GetEntityMessageIndex() int64 {
	if x != nil {
		return x.EntityMessageIndex
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetMessageCreatedAt() int64 {
	if x != nil {
		return x.MessageCreatedAt
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetReadAt() int64 {
	if x != nil {
		return x.ReadAt
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetTableShard() int32 {
	if x != nil {
		return x.TableShard
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetEntityMetaId() int64 {
	if x != nil {
		return x.EntityMetaId
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetEntityKey() string {
	if x != nil {
		return x.EntityKey
	}
	return ""
}

func (x *ReadMessageAddRequestStruct) GetMessageKey() string {
	if x != nil {
		return x.MessageKey
	}
	return ""
}

func (x *ReadMessageAddRequestStruct) GetDbShard() int32 {
	if x != nil {
		return x.DbShard
	}
	return 0
}

func (x *ReadMessageAddRequestStruct) GetIsForceShowParticipant() bool {
	if x != nil {
		return x.IsForceShowParticipant
	}
	return false
}

// формат ответа для ReadMessageAdd
type ReadMessageAddResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadMessageAddResponseStruct) Reset() {
	*x = ReadMessageAddResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMessageAddResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMessageAddResponseStruct) ProtoMessage() {}

func (x *ReadMessageAddResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMessageAddResponseStruct.ProtoReflect.Descriptor instead.
func (*ReadMessageAddResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{37}
}

// формат запроса для system.status
type SystemStatusRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemStatusRequestStruct) Reset() {
	*x = SystemStatusRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusRequestStruct) ProtoMessage() {}

func (x *SystemStatusRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemStatusRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{38}
}

// формат ответа для system.status
type SystemStatusResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Goroutines int64  `protobuf:"varint,2,opt,name=goroutines,proto3" json:"goroutines,omitempty"`
	Memory     int64  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	MemoryKb   string `protobuf:"bytes,4,opt,name=memory_kb,json=memoryKb,proto3" json:"memory_kb,omitempty"`
	MemoryMb   string `protobuf:"bytes,5,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	Uptime     int32  `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *SystemStatusResponseStruct) Reset() {
	*x = SystemStatusResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponseStruct) ProtoMessage() {}

func (x *SystemStatusResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemStatusResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{39}
}

func (x *SystemStatusResponseStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetGoroutines() int64 {
	if x != nil {
		return x.Goroutines
	}
	return 0
}

func (x *SystemStatusResponseStruct) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *SystemStatusResponseStruct) GetMemoryKb() string {
	if x != nil {
		return x.MemoryKb
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetMemoryMb() string {
	if x != nil {
		return x.MemoryMb
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetUptime() int32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

// формат запроса для system.traceGoroutine
type SystemTraceGoroutineRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceGoroutineRequestStruct) Reset() {
	*x = SystemTraceGoroutineRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceGoroutineRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceGoroutineRequestStruct) ProtoMessage() {}

func (x *SystemTraceGoroutineRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceGoroutineRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceGoroutineRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{40}
}

// формат ответа для system.traceGoroutine
type SystemTraceGoroutineResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceGoroutineResponseStruct) Reset() {
	*x = SystemTraceGoroutineResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceGoroutineResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceGoroutineResponseStruct) ProtoMessage() {}

func (x *SystemTraceGoroutineResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceGoroutineResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceGoroutineResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{41}
}

// формат запроса для system.traceMemory
type SystemTraceMemoryRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceMemoryRequestStruct) Reset() {
	*x = SystemTraceMemoryRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceMemoryRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceMemoryRequestStruct) ProtoMessage() {}

func (x *SystemTraceMemoryRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceMemoryRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceMemoryRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{42}
}

// формат ответа для system.traceMemory
type SystemTraceMemoryResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceMemoryResponseStruct) Reset() {
	*x = SystemTraceMemoryResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceMemoryResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceMemoryResponseStruct) ProtoMessage() {}

func (x *SystemTraceMemoryResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceMemoryResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceMemoryResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{43}
}

// формат запроса для system.cpuProfile
type SystemCpuProfileRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SystemCpuProfileRequestStruct) Reset() {
	*x = SystemCpuProfileRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCpuProfileRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCpuProfileRequestStruct) ProtoMessage() {}

func (x *SystemCpuProfileRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCpuProfileRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemCpuProfileRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{44}
}

func (x *SystemCpuProfileRequestStruct) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// формат ответа для system.cpuProfile
type SystemCpuProfileResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemCpuProfileResponseStruct) Reset() {
	*x = SystemCpuProfileResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCpuProfileResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCpuProfileResponseStruct) ProtoMessage() {}

func (x *SystemCpuProfileResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCpuProfileResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemCpuProfileResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{45}
}

// формат запроса для system.reloadConfig
type SystemReloadConfigRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadConfigRequestStruct) Reset() {
	*x = SystemReloadConfigRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadConfigRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadConfigRequestStruct) ProtoMessage() {}

func (x *SystemReloadConfigRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadConfigRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadConfigRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{46}
}

// формат ответа для system.reloadConfig
type SystemReloadConfigResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggingLevel   int32  `protobuf:"varint,1,opt,name=logging_level,json=loggingLevel,proto3" json:"logging_level,omitempty"`
	ServerType     string `protobuf:"bytes,2,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	CurrentDpc     int64  `protobuf:"varint,3,opt,name=current_dpc,json=currentDpc,proto3" json:"current_dpc,omitempty"`
	TcpPort        int64  `protobuf:"varint,4,opt,name=tcp_port,json=tcpPort,proto3" json:"tcp_port,omitempty"`
	RabbitQueue    string `protobuf:"bytes,5,opt,name=rabbit_queue,json=rabbitQueue,proto3" json:"rabbit_queue,omitempty"`
	RabbitExchange string `protobuf:"bytes,6,opt,name=rabbit_exchange,json=rabbitExchange,proto3" json:"rabbit_exchange,omitempty"`
}

func (x *SystemReloadConfigResponseStruct) Reset() {
	*x = SystemReloadConfigResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadConfigResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadConfigResponseStruct) ProtoMessage() {}

func (x *SystemReloadConfigResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadConfigResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadConfigResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{47}
}

func (x *SystemReloadConfigResponseStruct) GetLoggingLevel() int32 {
	if x != nil {
		return x.LoggingLevel
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *SystemReloadConfigResponseStruct) GetCurrentDpc() int64 {
	if x != nil {
		return x.CurrentDpc
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetTcpPort() int64 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetRabbitQueue() string {
	if x != nil {
		return x.RabbitQueue
	}
	return ""
}

func (x *SystemReloadConfigResponseStruct) GetRabbitExchange() string {
	if x != nil {
		return x.RabbitExchange
	}
	return ""
}

// формат запроса для system.reloadSharding
type SystemReloadShardingRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadShardingRequestStruct) Reset() {
	*x = SystemReloadShardingRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadShardingRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadShardingRequestStruct) ProtoMessage() {}

func (x *SystemReloadShardingRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadShardingRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadShardingRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{48}
}

// формат ответа для system.reloadSharding
type SystemReloadShardingResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadShardingResponseStruct) Reset() {
	*x = SystemReloadShardingResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadShardingResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadShardingResponseStruct) ProtoMessage() {}

func (x *SystemReloadShardingResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadShardingResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadShardingResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{49}
}

// формат запроса для system.checkSharding
type SystemCheckShardingRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *SystemCheckShardingRequestStruct) Reset() {
	*x = SystemCheckShardingRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCheckShardingRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCheckShardingRequestStruct) ProtoMessage() {}

func (x *SystemCheckShardingRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCheckShardingRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemCheckShardingRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{50}
}

func (x *SystemCheckShardingRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для system.checkSharding
type SystemCheckShardingResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemCheckShardingResponseStruct) Reset() {
	*x = SystemCheckShardingResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCheckShardingResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCheckShardingResponseStruct) ProtoMessage() {}

func (x *SystemCheckShardingResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCheckShardingResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemCheckShardingResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_proto_rawDescGZIP(), []int{51}
}

var File_proto_go_company_proto protoreflect.FileDescriptor

var file_proto_go_company_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x70, 0x63, 0x22, 0xb8, 0x01, 0x0a, 0x30, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x63, 0x44, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x6e,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x31, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x44, 0x61, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x78, 0x0a, 0x16, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x6e, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x16, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x0a, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x9a, 0x01, 0x0a, 0x17, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xe1, 0x02, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x1a, 0x41, 0x0a,
	0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xeb, 0x01, 0x0a, 0x1e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x12, 0x29, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x65, 0x41, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x74,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x41, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f,
	0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0xec,
	0x02, 0x0a, 0x1f, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x6a, 0x0a, 0x10, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a,
	0x23, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a,
	0x2a, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x70,
	0x0a, 0x2b, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x41, 0x0a,
	0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x31, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x0a,
	0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x32, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x41, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x42, 0x0a, 0x21, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x7f, 0x0a, 0x2d,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x30, 0x0a,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x5a, 0x0a, 0x20, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x21, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x1f, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x22, 0x99, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6c, 0x0a, 0x20,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44,
	0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x48, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x10, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdc, 0x04, 0x0a,
	0x1a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x77, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x27,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x5c, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0xa9, 0x01, 0x0a, 0x2a, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x5c, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x2b,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xbe, 0x04, 0x0a, 0x14,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x73, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73, 0x57, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x21, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x24, 0x0a,
	0x22, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x8c, 0x04, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x62, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x62, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22,
	0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xba, 0x01, 0x0a,
	0x1a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x6b, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d,
	0x62, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x24,
	0x0a, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x33, 0x0a, 0x1d, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x20,
	0x0a, 0x1e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x21, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x70, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x70, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61,
	0x62, 0x62, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0x41, 0x0a, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x32, 0xdc, 0x15, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x23, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x63, 0x44, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x63, 0x44, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x3e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x63, 0x44, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x09, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x12, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x11, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x1d, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12,
	0xa9, 0x01, 0x0a, 0x24, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x20, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x12, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x44, 0x61, 0x79, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x94, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x38, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00,
	0x12, 0x76, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_go_company_proto_rawDescOnce sync.Once
	file_proto_go_company_proto_rawDescData = file_proto_go_company_proto_rawDesc
)

func file_proto_go_company_proto_rawDescGZIP() []byte {
	file_proto_go_company_proto_rawDescOnce.Do(func() {
		file_proto_go_company_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_go_company_proto_rawDescData)
	})
	return file_proto_go_company_proto_rawDescData
}

var file_proto_go_company_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_proto_go_company_proto_goTypes = []interface{}{
	(*RatingIncDayRatingEventCountForUserRequestStruct)(nil),   // 0: companyGrpc.RatingIncDayRatingEventCountForUserRequestStruct
	(*RatingIncDayRatingEventCountForUserResponseStruct)(nil),  // 1: companyGrpc.RatingIncDayRatingEventCountForUserResponseStruct
	(*RatingIncRequestStruct)(nil),                             // 2: companyGrpc.RatingIncRequestStruct
	(*RatingIncResponseStruct)(nil),                            // 3: companyGrpc.RatingIncResponseStruct
	(*RatingGetRequestStruct)(nil),                             // 4: companyGrpc.RatingGetRequestStruct
	(*TopItem)(nil),                                            // 5: companyGrpc.TopItem
	(*RatingGetResponseStruct)(nil),                            // 6: companyGrpc.RatingGetResponseStruct
	(*UserRating)(nil),                                         // 7: companyGrpc.UserRating
	(*RatingGetByUserIdRequestStruct)(nil),                     // 8: companyGrpc.RatingGetByUserIdRequestStruct
	(*RatingGetByUserIdResponseStruct)(nil),                    // 9: companyGrpc.RatingGetByUserIdResponseStruct
	(*RatingGetByUserIdListResponseStruct)(nil),                // 10: companyGrpc.RatingGetByUserIdListResponseStruct
	(*RatingGetEventCountByIntervalRequestStruct)(nil),         // 11: companyGrpc.RatingGetEventCountByIntervalRequestStruct
	(*EventCount)(nil),                                         // 12: companyGrpc.EventCount
	(*RatingGetEventCountByIntervalResponseStruct)(nil),        // 13: companyGrpc.RatingGetEventCountByIntervalResponseStruct
	(*RatingGetGeneralEventCountByIntervalRequestStruct)(nil),  // 14: companyGrpc.RatingGetGeneralEventCountByIntervalRequestStruct
	(*RatingGetGeneralEventCountByIntervalResponseStruct)(nil), // 15: companyGrpc.RatingGetGeneralEventCountByIntervalResponseStruct
	(*RatingForceSaveCacheRequestStruct)(nil),                  // 16: companyGrpc.RatingForceSaveCacheRequestStruct
	(*RatingForceSaveCacheResponseStruct)(nil),                 // 17: companyGrpc.RatingForceSaveCacheResponseStruct
	(*RatingSetUserBlockInSystemStatusRequestStruct)(nil),      // 18: companyGrpc.RatingSetUserBlockInSystemStatusRequestStruct
	(*RatingSetUserBlockInSystemStatusResponseStruct)(nil),     // 19: companyGrpc.RatingSetUserBlockInSystemStatusResponseStruct
	(*RatingGetUserStatusRequestStruct)(nil),                   // 20: companyGrpc.RatingGetUserStatusRequestStruct
	(*RatingGetUserStatusResponseStruct)(nil),                  // 21: companyGrpc.RatingGetUserStatusResponseStruct
	(*RatingGetListByDayRequestStruct)(nil),                    // 22: companyGrpc.RatingGetListByDayRequestStruct
	(*UserDayStats)(nil),                                       // 23: companyGrpc.UserDayStats
	(*RatingGetListByDayResponseStruct)(nil),                   // 24: companyGrpc.RatingGetListByDayResponseStruct
	(*EventVersionItem)(nil),                                   // 25: companyGrpc.EventVersionItem
	(*ConversationReactionStruct)(nil),                         // 26: companyGrpc.ConversationReactionStruct
	(*ReactionsAddInConversationRequestStruct)(nil),            // 27: companyGrpc.ReactionsAddInConversationRequestStruct
	(*ReactionsAddInConversationResponseStruct)(nil),           // 28: companyGrpc.ReactionsAddInConversationResponseStruct
	(*ReactionsRemoveInConversationRequestStruct)(nil),         // 29: companyGrpc.ReactionsRemoveInConversationRequestStruct
	(*ReactionsRemoveInConversationResponseStruct)(nil),        // 30: companyGrpc.ReactionsRemoveInConversationResponseStruct
	(*ThreadReactionStruct)(nil),                               // 31: companyGrpc.ThreadReactionStruct
	(*ReactionsAddInThreadRequestStruct)(nil),                  // 32: companyGrpc.ReactionsAddInThreadRequestStruct
	(*ReactionsAddInThreadResponseStruct)(nil),                 // 33: companyGrpc.ReactionsAddInThreadResponseStruct
	(*ReactionsRemoveInThreadRequestStruct)(nil),               // 34: companyGrpc.ReactionsRemoveInThreadRequestStruct
	(*ReactionsRemoveInThreadResponseStruct)(nil),              // 35: companyGrpc.ReactionsRemoveInThreadResponseStruct
	(*ReadMessageAddRequestStruct)(nil),                        // 36: companyGrpc.ReadMessageAddRequestStruct
	(*ReadMessageAddResponseStruct)(nil),                       // 37: companyGrpc.ReadMessageAddResponseStruct
	(*SystemStatusRequestStruct)(nil),                          // 38: companyGrpc.SystemStatusRequestStruct
	(*SystemStatusResponseStruct)(nil),                         // 39: companyGrpc.SystemStatusResponseStruct
	(*SystemTraceGoroutineRequestStruct)(nil),                  // 40: companyGrpc.SystemTraceGoroutineRequestStruct
	(*SystemTraceGoroutineResponseStruct)(nil),                 // 41: companyGrpc.SystemTraceGoroutineResponseStruct
	(*SystemTraceMemoryRequestStruct)(nil),                     // 42: companyGrpc.SystemTraceMemoryRequestStruct
	(*SystemTraceMemoryResponseStruct)(nil),                    // 43: companyGrpc.SystemTraceMemoryResponseStruct
	(*SystemCpuProfileRequestStruct)(nil),                      // 44: companyGrpc.SystemCpuProfileRequestStruct
	(*SystemCpuProfileResponseStruct)(nil),                     // 45: companyGrpc.SystemCpuProfileResponseStruct
	(*SystemReloadConfigRequestStruct)(nil),                    // 46: companyGrpc.SystemReloadConfigRequestStruct
	(*SystemReloadConfigResponseStruct)(nil),                   // 47: companyGrpc.SystemReloadConfigResponseStruct
	(*SystemReloadShardingRequestStruct)(nil),                  // 48: companyGrpc.SystemReloadShardingRequestStruct
	(*SystemReloadShardingResponseStruct)(nil),                 // 49: companyGrpc.SystemReloadShardingResponseStruct
	(*SystemCheckShardingRequestStruct)(nil),                   // 50: companyGrpc.SystemCheckShardingRequestStruct
	(*SystemCheckShardingResponseStruct)(nil),                  // 51: companyGrpc.SystemCheckShardingResponseStruct
	nil, // 52: companyGrpc.UserRating.EventCountListEntry
	nil, // 53: companyGrpc.RatingGetByUserIdResponseStruct.EventCountListEntry
	nil, // 54: companyGrpc.UserDayStats.DataEntry
}
var file_proto_go_company_proto_depIdxs = []int32{
	5,  // 0: companyGrpc.RatingGetResponseStruct.top_list:type_name -> companyGrpc.TopItem
	52, // 1: companyGrpc.UserRating.event_count_list:type_name -> companyGrpc.UserRating.EventCountListEntry
	53, // 2: companyGrpc.RatingGetByUserIdResponseStruct.event_count_list:type_name -> companyGrpc.RatingGetByUserIdResponseStruct.EventCountListEntry
	9,  // 3: companyGrpc.RatingGetByUserIdListResponseStruct.user_rating_list:type_name -> companyGrpc.RatingGetByUserIdResponseStruct
	12, // 4: companyGrpc.RatingGetEventCountByIntervalResponseStruct.event_count_list:type_name -> companyGrpc.EventCount
	12, // 5: companyGrpc.RatingGetGeneralEventCountByIntervalResponseStruct.event_count_list:type_name -> companyGrpc.EventCount
	54, // 6: companyGrpc.UserDayStats.data:type_name -> companyGrpc.UserDayStats.DataEntry
	23, // 7: companyGrpc.RatingGetListByDayResponseStruct.user_day_stats_list:type_name -> companyGrpc.UserDayStats
	25, // 8: companyGrpc.ConversationReactionStruct.event_version_list:type_name -> companyGrpc.EventVersionItem
	26, // 9: companyGrpc.ReactionsAddInConversationRequestStruct.conversation_reaction:type_name -> companyGrpc.ConversationReactionStruct
	26, // 10: companyGrpc.ReactionsRemoveInConversationRequestStruct.conversation_reaction:type_name -> companyGrpc.ConversationReactionStruct
	25, // 11: companyGrpc.ThreadReactionStruct.event_version_list:type_name -> companyGrpc.EventVersionItem
	31, // 12: companyGrpc.ReactionsAddInThreadRequestStruct.thread_reaction:type_name -> companyGrpc.ThreadReactionStruct
	31, // 13: companyGrpc.ReactionsRemoveInThreadRequestStruct.thread_reaction:type_name -> companyGrpc.ThreadReactionStruct
	0,  // 14: companyGrpc.company.RatingIncDayRatingEventCountForUser:input_type -> companyGrpc.RatingIncDayRatingEventCountForUserRequestStruct
	2,  // 15: companyGrpc.company.RatingInc:input_type -> companyGrpc.RatingIncRequestStruct
	4,  // 16: companyGrpc.company.RatingGet:input_type -> companyGrpc.RatingGetRequestStruct
	8,  // 17: companyGrpc.company.RatingGetByUserId:input_type -> companyGrpc.RatingGetByUserIdRequestStruct
	11, // 18: companyGrpc.company.RatingGetEventCountByInterval:input_type -> companyGrpc.RatingGetEventCountByIntervalRequestStruct
	14, // 19: companyGrpc.company.RatingGetGeneralEventCountByInterval:input_type -> companyGrpc.RatingGetGeneralEventCountByIntervalRequestStruct
	16, // 20: companyGrpc.company.RatingForceSaveCache:input_type -> companyGrpc.RatingForceSaveCacheRequestStruct
	18, // 21: companyGrpc.company.RatingSetUserBlockInSystemStatus:input_type -> companyGrpc.RatingSetUserBlockInSystemStatusRequestStruct
	20, // 22: companyGrpc.company.RatingGetUserStatus:input_type -> companyGrpc.RatingGetUserStatusRequestStruct
	22, // 23: companyGrpc.company.RatingGetListByDay:input_type -> companyGrpc.RatingGetListByDayRequestStruct
	27, // 24: companyGrpc.company.ReactionsAddInConversation:input_type -> companyGrpc.ReactionsAddInConversationRequestStruct
	29, // 25: companyGrpc.company.ReactionsRemoveInConversation:input_type -> companyGrpc.ReactionsRemoveInConversationRequestStruct
	32, // 26: companyGrpc.company.ReactionsAddInThread:input_type -> companyGrpc.ReactionsAddInThreadRequestStruct
	34, // 27: companyGrpc.company.ReactionsRemoveInThread:input_type -> companyGrpc.ReactionsRemoveInThreadRequestStruct
	36, // 28: companyGrpc.company.ReadMessageAdd:input_type -> companyGrpc.ReadMessageAddRequestStruct
	38, // 29: companyGrpc.company.SystemStatus:input_type -> companyGrpc.SystemStatusRequestStruct
	40, // 30: companyGrpc.company.SystemTraceGoroutine:input_type -> companyGrpc.SystemTraceGoroutineRequestStruct
	42, // 31: companyGrpc.company.SystemTraceMemory:input_type -> companyGrpc.SystemTraceMemoryRequestStruct
	44, // 32: companyGrpc.company.SystemCpuProfile:input_type -> companyGrpc.SystemCpuProfileRequestStruct
	46, // 33: companyGrpc.company.SystemReloadConfig:input_type -> companyGrpc.SystemReloadConfigRequestStruct
	48, // 34: companyGrpc.company.SystemReloadSharding:input_type -> companyGrpc.SystemReloadShardingRequestStruct
	50, // 35: companyGrpc.company.SystemCheckSharding:input_type -> companyGrpc.SystemCheckShardingRequestStruct
	1,  // 36: companyGrpc.company.RatingIncDayRatingEventCountForUser:output_type -> companyGrpc.RatingIncDayRatingEventCountForUserResponseStruct
	3,  // 37: companyGrpc.company.RatingInc:output_type -> companyGrpc.RatingIncResponseStruct
	6,  // 38: companyGrpc.company.RatingGet:output_type -> companyGrpc.RatingGetResponseStruct
	10, // 39: companyGrpc.company.RatingGetByUserId:output_type -> companyGrpc.RatingGetByUserIdListResponseStruct
	13, // 40: companyGrpc.company.RatingGetEventCountByInterval:output_type -> companyGrpc.RatingGetEventCountByIntervalResponseStruct
	15, // 41: companyGrpc.company.RatingGetGeneralEventCountByInterval:output_type -> companyGrpc.RatingGetGeneralEventCountByIntervalResponseStruct
	17, // 42: companyGrpc.company.RatingForceSaveCache:output_type -> companyGrpc.RatingForceSaveCacheResponseStruct
	19, // 43: companyGrpc.company.RatingSetUserBlockInSystemStatus:output_type -> companyGrpc.RatingSetUserBlockInSystemStatusResponseStruct
	21, // 44: companyGrpc.company.RatingGetUserStatus:output_type -> companyGrpc.RatingGetUserStatusResponseStruct
	24, // 45: companyGrpc.company.RatingGetListByDay:output_type -> companyGrpc.RatingGetListByDayResponseStruct
	28, // 46: companyGrpc.company.ReactionsAddInConversation:output_type -> companyGrpc.ReactionsAddInConversationResponseStruct
	30, // 47: companyGrpc.company.ReactionsRemoveInConversation:output_type -> companyGrpc.ReactionsRemoveInConversationResponseStruct
	33, // 48: companyGrpc.company.ReactionsAddInThread:output_type -> companyGrpc.ReactionsAddInThreadResponseStruct
	35, // 49: companyGrpc.company.ReactionsRemoveInThread:output_type -> companyGrpc.ReactionsRemoveInThreadResponseStruct
	37, // 50: companyGrpc.company.ReadMessageAdd:output_type -> companyGrpc.ReadMessageAddResponseStruct
	39, // 51: companyGrpc.company.SystemStatus:output_type -> companyGrpc.SystemStatusResponseStruct
	41, // 52: companyGrpc.company.SystemTraceGoroutine:output_type -> companyGrpc.SystemTraceGoroutineResponseStruct
	43, // 53: companyGrpc.company.SystemTraceMemory:output_type -> companyGrpc.SystemTraceMemoryResponseStruct
	45, // 54: companyGrpc.company.SystemCpuProfile:output_type -> companyGrpc.SystemCpuProfileResponseStruct
	47, // 55: companyGrpc.company.SystemReloadConfig:output_type -> companyGrpc.SystemReloadConfigResponseStruct
	49, // 56: companyGrpc.company.SystemReloadSharding:output_type -> companyGrpc.SystemReloadShardingResponseStruct
	51, // 57: companyGrpc.company.SystemCheckSharding:output_type -> companyGrpc.SystemCheckShardingResponseStruct
	36, // [36:58] is the sub-list for method output_type
	14, // [14:36] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_go_company_proto_init() }
func file_proto_go_company_proto_init() {
	if File_proto_go_company_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_go_company_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingIncDayRatingEventCountForUserRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingIncDayRatingEventCountForUserResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingIncRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingIncResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetByUserIdRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetByUserIdResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetByUserIdListResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetEventCountByIntervalRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetEventCountByIntervalResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetGeneralEventCountByIntervalRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetGeneralEventCountByIntervalResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingForceSaveCacheRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingForceSaveCacheResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingSetUserBlockInSystemStatusRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingSetUserBlockInSystemStatusResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetUserStatusRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetUserStatusResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetListByDayRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDayStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatingGetListByDayResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventVersionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationReactionStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsAddInConversationRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsAddInConversationResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsRemoveInConversationRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsRemoveInConversationResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadReactionStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsAddInThreadRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsAddInThreadResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsRemoveInThreadRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionsRemoveInThreadResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMessageAddRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadMessageAddResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceGoroutineRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceGoroutineResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceMemoryRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceMemoryResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCpuProfileRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCpuProfileResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadConfigRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadConfigResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadShardingRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadShardingResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCheckShardingRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCheckShardingResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_go_company_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_go_company_proto_goTypes,
		DependencyIndexes: file_proto_go_company_proto_depIdxs,
		MessageInfos:      file_proto_go_company_proto_msgTypes,
	}.Build()
	File_proto_go_company_proto = out.File
	file_proto_go_company_proto_rawDesc = nil
	file_proto_go_company_proto_goTypes = nil
	file_proto_go_company_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyClient interface {
	RatingIncDayRatingEventCountForUser(ctx context.Context, in *RatingIncDayRatingEventCountForUserRequestStruct, opts ...grpc.CallOption) (*RatingIncDayRatingEventCountForUserResponseStruct, error)
	RatingInc(ctx context.Context, in *RatingIncRequestStruct, opts ...grpc.CallOption) (*RatingIncResponseStruct, error)
	RatingGet(ctx context.Context, in *RatingGetRequestStruct, opts ...grpc.CallOption) (*RatingGetResponseStruct, error)
	RatingGetByUserId(ctx context.Context, in *RatingGetByUserIdRequestStruct, opts ...grpc.CallOption) (*RatingGetByUserIdListResponseStruct, error)
	RatingGetEventCountByInterval(ctx context.Context, in *RatingGetEventCountByIntervalRequestStruct, opts ...grpc.CallOption) (*RatingGetEventCountByIntervalResponseStruct, error)
	RatingGetGeneralEventCountByInterval(ctx context.Context, in *RatingGetGeneralEventCountByIntervalRequestStruct, opts ...grpc.CallOption) (*RatingGetGeneralEventCountByIntervalResponseStruct, error)
	RatingForceSaveCache(ctx context.Context, in *RatingForceSaveCacheRequestStruct, opts ...grpc.CallOption) (*RatingForceSaveCacheResponseStruct, error)
	RatingSetUserBlockInSystemStatus(ctx context.Context, in *RatingSetUserBlockInSystemStatusRequestStruct, opts ...grpc.CallOption) (*RatingSetUserBlockInSystemStatusResponseStruct, error)
	RatingGetUserStatus(ctx context.Context, in *RatingGetUserStatusRequestStruct, opts ...grpc.CallOption) (*RatingGetUserStatusResponseStruct, error)
	RatingGetListByDay(ctx context.Context, in *RatingGetListByDayRequestStruct, opts ...grpc.CallOption) (*RatingGetListByDayResponseStruct, error)
	ReactionsAddInConversation(ctx context.Context, in *ReactionsAddInConversationRequestStruct, opts ...grpc.CallOption) (*ReactionsAddInConversationResponseStruct, error)
	ReactionsRemoveInConversation(ctx context.Context, in *ReactionsRemoveInConversationRequestStruct, opts ...grpc.CallOption) (*ReactionsRemoveInConversationResponseStruct, error)
	ReactionsAddInThread(ctx context.Context, in *ReactionsAddInThreadRequestStruct, opts ...grpc.CallOption) (*ReactionsAddInThreadResponseStruct, error)
	ReactionsRemoveInThread(ctx context.Context, in *ReactionsRemoveInThreadRequestStruct, opts ...grpc.CallOption) (*ReactionsRemoveInThreadResponseStruct, error)
	ReadMessageAdd(ctx context.Context, in *ReadMessageAddRequestStruct, opts ...grpc.CallOption) (*ReadMessageAddResponseStruct, error)
	SystemStatus(ctx context.Context, in *SystemStatusRequestStruct, opts ...grpc.CallOption) (*SystemStatusResponseStruct, error)
	SystemTraceGoroutine(ctx context.Context, in *SystemTraceGoroutineRequestStruct, opts ...grpc.CallOption) (*SystemTraceGoroutineResponseStruct, error)
	SystemTraceMemory(ctx context.Context, in *SystemTraceMemoryRequestStruct, opts ...grpc.CallOption) (*SystemTraceMemoryResponseStruct, error)
	SystemCpuProfile(ctx context.Context, in *SystemCpuProfileRequestStruct, opts ...grpc.CallOption) (*SystemCpuProfileResponseStruct, error)
	SystemReloadConfig(ctx context.Context, in *SystemReloadConfigRequestStruct, opts ...grpc.CallOption) (*SystemReloadConfigResponseStruct, error)
	SystemReloadSharding(ctx context.Context, in *SystemReloadShardingRequestStruct, opts ...grpc.CallOption) (*SystemReloadShardingResponseStruct, error)
	SystemCheckSharding(ctx context.Context, in *SystemCheckShardingRequestStruct, opts ...grpc.CallOption) (*SystemCheckShardingResponseStruct, error)
}

type companyClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyClient(cc grpc.ClientConnInterface) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) RatingIncDayRatingEventCountForUser(ctx context.Context, in *RatingIncDayRatingEventCountForUserRequestStruct, opts ...grpc.CallOption) (*RatingIncDayRatingEventCountForUserResponseStruct, error) {
	out := new(RatingIncDayRatingEventCountForUserResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingIncDayRatingEventCountForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingInc(ctx context.Context, in *RatingIncRequestStruct, opts ...grpc.CallOption) (*RatingIncResponseStruct, error) {
	out := new(RatingIncResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingInc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingGet(ctx context.Context, in *RatingGetRequestStruct, opts ...grpc.CallOption) (*RatingGetResponseStruct, error) {
	out := new(RatingGetResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingGetByUserId(ctx context.Context, in *RatingGetByUserIdRequestStruct, opts ...grpc.CallOption) (*RatingGetByUserIdListResponseStruct, error) {
	out := new(RatingGetByUserIdListResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingGetByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingGetEventCountByInterval(ctx context.Context, in *RatingGetEventCountByIntervalRequestStruct, opts ...grpc.CallOption) (*RatingGetEventCountByIntervalResponseStruct, error) {
	out := new(RatingGetEventCountByIntervalResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingGetEventCountByInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingGetGeneralEventCountByInterval(ctx context.Context, in *RatingGetGeneralEventCountByIntervalRequestStruct, opts ...grpc.CallOption) (*RatingGetGeneralEventCountByIntervalResponseStruct, error) {
	out := new(RatingGetGeneralEventCountByIntervalResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingGetGeneralEventCountByInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingForceSaveCache(ctx context.Context, in *RatingForceSaveCacheRequestStruct, opts ...grpc.CallOption) (*RatingForceSaveCacheResponseStruct, error) {
	out := new(RatingForceSaveCacheResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingForceSaveCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingSetUserBlockInSystemStatus(ctx context.Context, in *RatingSetUserBlockInSystemStatusRequestStruct, opts ...grpc.CallOption) (*RatingSetUserBlockInSystemStatusResponseStruct, error) {
	out := new(RatingSetUserBlockInSystemStatusResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingSetUserBlockInSystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingGetUserStatus(ctx context.Context, in *RatingGetUserStatusRequestStruct, opts ...grpc.CallOption) (*RatingGetUserStatusResponseStruct, error) {
	out := new(RatingGetUserStatusResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingGetUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) RatingGetListByDay(ctx context.Context, in *RatingGetListByDayRequestStruct, opts ...grpc.CallOption) (*RatingGetListByDayResponseStruct, error) {
	out := new(RatingGetListByDayResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/RatingGetListByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) ReactionsAddInConversation(ctx context.Context, in *ReactionsAddInConversationRequestStruct, opts ...grpc.CallOption) (*ReactionsAddInConversationResponseStruct, error) {
	out := new(ReactionsAddInConversationResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/ReactionsAddInConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) ReactionsRemoveInConversation(ctx context.Context, in *ReactionsRemoveInConversationRequestStruct, opts ...grpc.CallOption) (*ReactionsRemoveInConversationResponseStruct, error) {
	out := new(ReactionsRemoveInConversationResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/ReactionsRemoveInConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) ReactionsAddInThread(ctx context.Context, in *ReactionsAddInThreadRequestStruct, opts ...grpc.CallOption) (*ReactionsAddInThreadResponseStruct, error) {
	out := new(ReactionsAddInThreadResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/ReactionsAddInThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) ReactionsRemoveInThread(ctx context.Context, in *ReactionsRemoveInThreadRequestStruct, opts ...grpc.CallOption) (*ReactionsRemoveInThreadResponseStruct, error) {
	out := new(ReactionsRemoveInThreadResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/ReactionsRemoveInThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) ReadMessageAdd(ctx context.Context, in *ReadMessageAddRequestStruct, opts ...grpc.CallOption) (*ReadMessageAddResponseStruct, error) {
	out := new(ReadMessageAddResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/ReadMessageAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SystemStatus(ctx context.Context, in *SystemStatusRequestStruct, opts ...grpc.CallOption) (*SystemStatusResponseStruct, error) {
	out := new(SystemStatusResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/SystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SystemTraceGoroutine(ctx context.Context, in *SystemTraceGoroutineRequestStruct, opts ...grpc.CallOption) (*SystemTraceGoroutineResponseStruct, error) {
	out := new(SystemTraceGoroutineResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/SystemTraceGoroutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SystemTraceMemory(ctx context.Context, in *SystemTraceMemoryRequestStruct, opts ...grpc.CallOption) (*SystemTraceMemoryResponseStruct, error) {
	out := new(SystemTraceMemoryResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/SystemTraceMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SystemCpuProfile(ctx context.Context, in *SystemCpuProfileRequestStruct, opts ...grpc.CallOption) (*SystemCpuProfileResponseStruct, error) {
	out := new(SystemCpuProfileResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/SystemCpuProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SystemReloadConfig(ctx context.Context, in *SystemReloadConfigRequestStruct, opts ...grpc.CallOption) (*SystemReloadConfigResponseStruct, error) {
	out := new(SystemReloadConfigResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/SystemReloadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SystemReloadSharding(ctx context.Context, in *SystemReloadShardingRequestStruct, opts ...grpc.CallOption) (*SystemReloadShardingResponseStruct, error) {
	out := new(SystemReloadShardingResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/SystemReloadSharding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) SystemCheckSharding(ctx context.Context, in *SystemCheckShardingRequestStruct, opts ...grpc.CallOption) (*SystemCheckShardingResponseStruct, error) {
	out := new(SystemCheckShardingResponseStruct)
	err := c.cc.Invoke(ctx, "/companyGrpc.company/SystemCheckSharding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
type CompanyServer interface {
	RatingIncDayRatingEventCountForUser(context.Context, *RatingIncDayRatingEventCountForUserRequestStruct) (*RatingIncDayRatingEventCountForUserResponseStruct, error)
	RatingInc(context.Context, *RatingIncRequestStruct) (*RatingIncResponseStruct, error)
	RatingGet(context.Context, *RatingGetRequestStruct) (*RatingGetResponseStruct, error)
	RatingGetByUserId(context.Context, *RatingGetByUserIdRequestStruct) (*RatingGetByUserIdListResponseStruct, error)
	RatingGetEventCountByInterval(context.Context, *RatingGetEventCountByIntervalRequestStruct) (*RatingGetEventCountByIntervalResponseStruct, error)
	RatingGetGeneralEventCountByInterval(context.Context, *RatingGetGeneralEventCountByIntervalRequestStruct) (*RatingGetGeneralEventCountByIntervalResponseStruct, error)
	RatingForceSaveCache(context.Context, *RatingForceSaveCacheRequestStruct) (*RatingForceSaveCacheResponseStruct, error)
	RatingSetUserBlockInSystemStatus(context.Context, *RatingSetUserBlockInSystemStatusRequestStruct) (*RatingSetUserBlockInSystemStatusResponseStruct, error)
	RatingGetUserStatus(context.Context, *RatingGetUserStatusRequestStruct) (*RatingGetUserStatusResponseStruct, error)
	RatingGetListByDay(context.Context, *RatingGetListByDayRequestStruct) (*RatingGetListByDayResponseStruct, error)
	ReactionsAddInConversation(context.Context, *ReactionsAddInConversationRequestStruct) (*ReactionsAddInConversationResponseStruct, error)
	ReactionsRemoveInConversation(context.Context, *ReactionsRemoveInConversationRequestStruct) (*ReactionsRemoveInConversationResponseStruct, error)
	ReactionsAddInThread(context.Context, *ReactionsAddInThreadRequestStruct) (*ReactionsAddInThreadResponseStruct, error)
	ReactionsRemoveInThread(context.Context, *ReactionsRemoveInThreadRequestStruct) (*ReactionsRemoveInThreadResponseStruct, error)
	ReadMessageAdd(context.Context, *ReadMessageAddRequestStruct) (*ReadMessageAddResponseStruct, error)
	SystemStatus(context.Context, *SystemStatusRequestStruct) (*SystemStatusResponseStruct, error)
	SystemTraceGoroutine(context.Context, *SystemTraceGoroutineRequestStruct) (*SystemTraceGoroutineResponseStruct, error)
	SystemTraceMemory(context.Context, *SystemTraceMemoryRequestStruct) (*SystemTraceMemoryResponseStruct, error)
	SystemCpuProfile(context.Context, *SystemCpuProfileRequestStruct) (*SystemCpuProfileResponseStruct, error)
	SystemReloadConfig(context.Context, *SystemReloadConfigRequestStruct) (*SystemReloadConfigResponseStruct, error)
	SystemReloadSharding(context.Context, *SystemReloadShardingRequestStruct) (*SystemReloadShardingResponseStruct, error)
	SystemCheckSharding(context.Context, *SystemCheckShardingRequestStruct) (*SystemCheckShardingResponseStruct, error)
}

// UnimplementedCompanyServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServer struct {
}

func (*UnimplementedCompanyServer) RatingIncDayRatingEventCountForUser(context.Context, *RatingIncDayRatingEventCountForUserRequestStruct) (*RatingIncDayRatingEventCountForUserResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingIncDayRatingEventCountForUser not implemented")
}
func (*UnimplementedCompanyServer) RatingInc(context.Context, *RatingIncRequestStruct) (*RatingIncResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingInc not implemented")
}
func (*UnimplementedCompanyServer) RatingGet(context.Context, *RatingGetRequestStruct) (*RatingGetResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingGet not implemented")
}
func (*UnimplementedCompanyServer) RatingGetByUserId(context.Context, *RatingGetByUserIdRequestStruct) (*RatingGetByUserIdListResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingGetByUserId not implemented")
}
func (*UnimplementedCompanyServer) RatingGetEventCountByInterval(context.Context, *RatingGetEventCountByIntervalRequestStruct) (*RatingGetEventCountByIntervalResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingGetEventCountByInterval not implemented")
}
func (*UnimplementedCompanyServer) RatingGetGeneralEventCountByInterval(context.Context, *RatingGetGeneralEventCountByIntervalRequestStruct) (*RatingGetGeneralEventCountByIntervalResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingGetGeneralEventCountByInterval not implemented")
}
func (*UnimplementedCompanyServer) RatingForceSaveCache(context.Context, *RatingForceSaveCacheRequestStruct) (*RatingForceSaveCacheResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingForceSaveCache not implemented")
}
func (*UnimplementedCompanyServer) RatingSetUserBlockInSystemStatus(context.Context, *RatingSetUserBlockInSystemStatusRequestStruct) (*RatingSetUserBlockInSystemStatusResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingSetUserBlockInSystemStatus not implemented")
}
func (*UnimplementedCompanyServer) RatingGetUserStatus(context.Context, *RatingGetUserStatusRequestStruct) (*RatingGetUserStatusResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingGetUserStatus not implemented")
}
func (*UnimplementedCompanyServer) RatingGetListByDay(context.Context, *RatingGetListByDayRequestStruct) (*RatingGetListByDayResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RatingGetListByDay not implemented")
}
func (*UnimplementedCompanyServer) ReactionsAddInConversation(context.Context, *ReactionsAddInConversationRequestStruct) (*ReactionsAddInConversationResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactionsAddInConversation not implemented")
}
func (*UnimplementedCompanyServer) ReactionsRemoveInConversation(context.Context, *ReactionsRemoveInConversationRequestStruct) (*ReactionsRemoveInConversationResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactionsRemoveInConversation not implemented")
}
func (*UnimplementedCompanyServer) ReactionsAddInThread(context.Context, *ReactionsAddInThreadRequestStruct) (*ReactionsAddInThreadResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactionsAddInThread not implemented")
}
func (*UnimplementedCompanyServer) ReactionsRemoveInThread(context.Context, *ReactionsRemoveInThreadRequestStruct) (*ReactionsRemoveInThreadResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactionsRemoveInThread not implemented")
}
func (*UnimplementedCompanyServer) ReadMessageAdd(context.Context, *ReadMessageAddRequestStruct) (*ReadMessageAddResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessageAdd not implemented")
}
func (*UnimplementedCompanyServer) SystemStatus(context.Context, *SystemStatusRequestStruct) (*SystemStatusResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStatus not implemented")
}
func (*UnimplementedCompanyServer) SystemTraceGoroutine(context.Context, *SystemTraceGoroutineRequestStruct) (*SystemTraceGoroutineResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemTraceGoroutine not implemented")
}
func (*UnimplementedCompanyServer) SystemTraceMemory(context.Context, *SystemTraceMemoryRequestStruct) (*SystemTraceMemoryResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemTraceMemory not implemented")
}
func (*UnimplementedCompanyServer) SystemCpuProfile(context.Context, *SystemCpuProfileRequestStruct) (*SystemCpuProfileResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCpuProfile not implemented")
}
func (*UnimplementedCompanyServer) SystemReloadConfig(context.Context, *SystemReloadConfigRequestStruct) (*SystemReloadConfigResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemReloadConfig not implemented")
}
func (*UnimplementedCompanyServer) SystemReloadSharding(context.Context, *SystemReloadShardingRequestStruct) (*SystemReloadShardingResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemReloadSharding not implemented")
}
func (*UnimplementedCompanyServer) SystemCheckSharding(context.Context, *SystemCheckShardingRequestStruct) (*SystemCheckShardingResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckSharding not implemented")
}

func RegisterCompanyServer(s *grpc.Server, srv CompanyServer) {
	s.RegisterService(&_Company_serviceDesc, srv)
}

func _Company_RatingIncDayRatingEventCountForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingIncDayRatingEventCountForUserRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingIncDayRatingEventCountForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingIncDayRatingEventCountForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingIncDayRatingEventCountForUser(ctx, req.(*RatingIncDayRatingEventCountForUserRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingInc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingIncRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingInc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingInc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingInc(ctx, req.(*RatingIncRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingGetRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingGet(ctx, req.(*RatingGetRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingGetByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingGetByUserIdRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingGetByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingGetByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingGetByUserId(ctx, req.(*RatingGetByUserIdRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingGetEventCountByInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingGetEventCountByIntervalRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingGetEventCountByInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingGetEventCountByInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingGetEventCountByInterval(ctx, req.(*RatingGetEventCountByIntervalRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingGetGeneralEventCountByInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingGetGeneralEventCountByIntervalRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingGetGeneralEventCountByInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingGetGeneralEventCountByInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingGetGeneralEventCountByInterval(ctx, req.(*RatingGetGeneralEventCountByIntervalRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingForceSaveCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingForceSaveCacheRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingForceSaveCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingForceSaveCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingForceSaveCache(ctx, req.(*RatingForceSaveCacheRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingSetUserBlockInSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingSetUserBlockInSystemStatusRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingSetUserBlockInSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingSetUserBlockInSystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingSetUserBlockInSystemStatus(ctx, req.(*RatingSetUserBlockInSystemStatusRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingGetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingGetUserStatusRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingGetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingGetUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingGetUserStatus(ctx, req.(*RatingGetUserStatusRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_RatingGetListByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingGetListByDayRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).RatingGetListByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/RatingGetListByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).RatingGetListByDay(ctx, req.(*RatingGetListByDayRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_ReactionsAddInConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionsAddInConversationRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).ReactionsAddInConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/ReactionsAddInConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).ReactionsAddInConversation(ctx, req.(*ReactionsAddInConversationRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_ReactionsRemoveInConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionsRemoveInConversationRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).ReactionsRemoveInConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/ReactionsRemoveInConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).ReactionsRemoveInConversation(ctx, req.(*ReactionsRemoveInConversationRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_ReactionsAddInThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionsAddInThreadRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).ReactionsAddInThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/ReactionsAddInThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).ReactionsAddInThread(ctx, req.(*ReactionsAddInThreadRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_ReactionsRemoveInThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactionsRemoveInThreadRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).ReactionsRemoveInThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/ReactionsRemoveInThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).ReactionsRemoveInThread(ctx, req.(*ReactionsRemoveInThreadRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_ReadMessageAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMessageAddRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).ReadMessageAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/ReadMessageAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).ReadMessageAdd(ctx, req.(*ReadMessageAddRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStatusRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/SystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SystemStatus(ctx, req.(*SystemStatusRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SystemTraceGoroutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTraceGoroutineRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SystemTraceGoroutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/SystemTraceGoroutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SystemTraceGoroutine(ctx, req.(*SystemTraceGoroutineRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SystemTraceMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTraceMemoryRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SystemTraceMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/SystemTraceMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SystemTraceMemory(ctx, req.(*SystemTraceMemoryRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SystemCpuProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCpuProfileRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SystemCpuProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/SystemCpuProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SystemCpuProfile(ctx, req.(*SystemCpuProfileRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SystemReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemReloadConfigRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SystemReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/SystemReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SystemReloadConfig(ctx, req.(*SystemReloadConfigRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SystemReloadSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemReloadShardingRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SystemReloadSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/SystemReloadSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SystemReloadSharding(ctx, req.(*SystemReloadShardingRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_SystemCheckSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCheckShardingRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).SystemCheckSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyGrpc.company/SystemCheckSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).SystemCheckSharding(ctx, req.(*SystemCheckShardingRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _Company_serviceDesc = grpc.ServiceDesc{
	ServiceName: "companyGrpc.company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RatingIncDayRatingEventCountForUser",
			Handler:    _Company_RatingIncDayRatingEventCountForUser_Handler,
		},
		{
			MethodName: "RatingInc",
			Handler:    _Company_RatingInc_Handler,
		},
		{
			MethodName: "RatingGet",
			Handler:    _Company_RatingGet_Handler,
		},
		{
			MethodName: "RatingGetByUserId",
			Handler:    _Company_RatingGetByUserId_Handler,
		},
		{
			MethodName: "RatingGetEventCountByInterval",
			Handler:    _Company_RatingGetEventCountByInterval_Handler,
		},
		{
			MethodName: "RatingGetGeneralEventCountByInterval",
			Handler:    _Company_RatingGetGeneralEventCountByInterval_Handler,
		},
		{
			MethodName: "RatingForceSaveCache",
			Handler:    _Company_RatingForceSaveCache_Handler,
		},
		{
			MethodName: "RatingSetUserBlockInSystemStatus",
			Handler:    _Company_RatingSetUserBlockInSystemStatus_Handler,
		},
		{
			MethodName: "RatingGetUserStatus",
			Handler:    _Company_RatingGetUserStatus_Handler,
		},
		{
			MethodName: "RatingGetListByDay",
			Handler:    _Company_RatingGetListByDay_Handler,
		},
		{
			MethodName: "ReactionsAddInConversation",
			Handler:    _Company_ReactionsAddInConversation_Handler,
		},
		{
			MethodName: "ReactionsRemoveInConversation",
			Handler:    _Company_ReactionsRemoveInConversation_Handler,
		},
		{
			MethodName: "ReactionsAddInThread",
			Handler:    _Company_ReactionsAddInThread_Handler,
		},
		{
			MethodName: "ReactionsRemoveInThread",
			Handler:    _Company_ReactionsRemoveInThread_Handler,
		},
		{
			MethodName: "ReadMessageAdd",
			Handler:    _Company_ReadMessageAdd_Handler,
		},
		{
			MethodName: "SystemStatus",
			Handler:    _Company_SystemStatus_Handler,
		},
		{
			MethodName: "SystemTraceGoroutine",
			Handler:    _Company_SystemTraceGoroutine_Handler,
		},
		{
			MethodName: "SystemTraceMemory",
			Handler:    _Company_SystemTraceMemory_Handler,
		},
		{
			MethodName: "SystemCpuProfile",
			Handler:    _Company_SystemCpuProfile_Handler,
		},
		{
			MethodName: "SystemReloadConfig",
			Handler:    _Company_SystemReloadConfig_Handler,
		},
		{
			MethodName: "SystemReloadSharding",
			Handler:    _Company_SystemReloadSharding_Handler,
		},
		{
			MethodName: "SystemCheckSharding",
			Handler:    _Company_SystemCheckSharding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/go_company.proto",
}
