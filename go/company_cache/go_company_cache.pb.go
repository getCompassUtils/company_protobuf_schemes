// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: proto/go_company_cache.proto

package company_cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// формат запроса для session.getInfo
type SessionGetInfoRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUniq string `protobuf:"bytes,1,opt,name=session_uniq,json=sessionUniq,proto3" json:"session_uniq,omitempty"`
	CompanyId   int64  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *SessionGetInfoRequestStruct) Reset() {
	*x = SessionGetInfoRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGetInfoRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGetInfoRequestStruct) ProtoMessage() {}

func (x *SessionGetInfoRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGetInfoRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionGetInfoRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{0}
}

func (x *SessionGetInfoRequestStruct) GetSessionUniq() string {
	if x != nil {
		return x.SessionUniq
	}
	return ""
}

func (x *SessionGetInfoRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для session.getInfo
type SessionGetInfoResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UaHash    string            `protobuf:"bytes,2,opt,name=ua_hash,json=uaHash,proto3" json:"ua_hash,omitempty"`
	IpAddress string            `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Extra     string            `protobuf:"bytes,4,opt,name=extra,proto3" json:"extra,omitempty"`
	Member    *MemberInfoStruct `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *SessionGetInfoResponseStruct) Reset() {
	*x = SessionGetInfoResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGetInfoResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGetInfoResponseStruct) ProtoMessage() {}

func (x *SessionGetInfoResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGetInfoResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionGetInfoResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{1}
}

func (x *SessionGetInfoResponseStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionGetInfoResponseStruct) GetUaHash() string {
	if x != nil {
		return x.UaHash
	}
	return ""
}

func (x *SessionGetInfoResponseStruct) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *SessionGetInfoResponseStruct) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *SessionGetInfoResponseStruct) GetMember() *MemberInfoStruct {
	if x != nil {
		return x.Member
	}
	return nil
}

// формат запроса для session.getListByUserId
type SessionGetListByUserIdRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *SessionGetListByUserIdRequestStruct) Reset() {
	*x = SessionGetListByUserIdRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGetListByUserIdRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGetListByUserIdRequestStruct) ProtoMessage() {}

func (x *SessionGetListByUserIdRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGetListByUserIdRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionGetListByUserIdRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{2}
}

func (x *SessionGetListByUserIdRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionGetListByUserIdRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для session.getListByUserId
type SessionGetListByUserIdResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUniqList []string `protobuf:"bytes,1,rep,name=session_uniq_list,json=sessionUniqList,proto3" json:"session_uniq_list,omitempty"`
}

func (x *SessionGetListByUserIdResponseStruct) Reset() {
	*x = SessionGetListByUserIdResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGetListByUserIdResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGetListByUserIdResponseStruct) ProtoMessage() {}

func (x *SessionGetListByUserIdResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGetListByUserIdResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionGetListByUserIdResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{3}
}

func (x *SessionGetListByUserIdResponseStruct) GetSessionUniqList() []string {
	if x != nil {
		return x.SessionUniqList
	}
	return nil
}

// формат запроса для session.deleteByUserId
type SessionDeleteByUserIdRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *SessionDeleteByUserIdRequestStruct) Reset() {
	*x = SessionDeleteByUserIdRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteByUserIdRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteByUserIdRequestStruct) ProtoMessage() {}

func (x *SessionDeleteByUserIdRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteByUserIdRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteByUserIdRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{4}
}

func (x *SessionDeleteByUserIdRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionDeleteByUserIdRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для session.deleteByUserId
type SessionDeleteByUserIdResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionDeleteByUserIdResponseStruct) Reset() {
	*x = SessionDeleteByUserIdResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteByUserIdResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteByUserIdResponseStruct) ProtoMessage() {}

func (x *SessionDeleteByUserIdResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteByUserIdResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteByUserIdResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{5}
}

// формат запроса для session.deleteBySessionUniq
type SessionDeleteBySessionUniqRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUniq string `protobuf:"bytes,1,opt,name=session_uniq,json=sessionUniq,proto3" json:"session_uniq,omitempty"`
	CompanyId   int64  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *SessionDeleteBySessionUniqRequestStruct) Reset() {
	*x = SessionDeleteBySessionUniqRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteBySessionUniqRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteBySessionUniqRequestStruct) ProtoMessage() {}

func (x *SessionDeleteBySessionUniqRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteBySessionUniqRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteBySessionUniqRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{6}
}

func (x *SessionDeleteBySessionUniqRequestStruct) GetSessionUniq() string {
	if x != nil {
		return x.SessionUniq
	}
	return ""
}

func (x *SessionDeleteBySessionUniqRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для session.deleteBySessionUniq
type SessionDeleteBySessionUniqResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionDeleteBySessionUniqResponseStruct) Reset() {
	*x = SessionDeleteBySessionUniqResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDeleteBySessionUniqResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDeleteBySessionUniqResponseStruct) ProtoMessage() {}

func (x *SessionDeleteBySessionUniqResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDeleteBySessionUniqResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionDeleteBySessionUniqResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{7}
}

// формат запроса для session.clearCache
type SessionClearCacheRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *SessionClearCacheRequestStruct) Reset() {
	*x = SessionClearCacheRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionClearCacheRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionClearCacheRequestStruct) ProtoMessage() {}

func (x *SessionClearCacheRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionClearCacheRequestStruct.ProtoReflect.Descriptor instead.
func (*SessionClearCacheRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{8}
}

func (x *SessionClearCacheRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для session.clearCache
type SessionClearCacheResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionClearCacheResponseStruct) Reset() {
	*x = SessionClearCacheResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionClearCacheResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionClearCacheResponseStruct) ProtoMessage() {}

func (x *SessionClearCacheResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionClearCacheResponseStruct.ProtoReflect.Descriptor instead.
func (*SessionClearCacheResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{9}
}

// формат запроса для system.status
type SystemStatusRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemStatusRequestStruct) Reset() {
	*x = SystemStatusRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusRequestStruct) ProtoMessage() {}

func (x *SystemStatusRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemStatusRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{10}
}

// формат ответа для system.status
type SystemStatusResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Goroutines int64  `protobuf:"varint,2,opt,name=goroutines,proto3" json:"goroutines,omitempty"`
	Memory     int64  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	MemoryKb   string `protobuf:"bytes,4,opt,name=memory_kb,json=memoryKb,proto3" json:"memory_kb,omitempty"`
	MemoryMb   string `protobuf:"bytes,5,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	Uptime     int32  `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *SystemStatusResponseStruct) Reset() {
	*x = SystemStatusResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponseStruct) ProtoMessage() {}

func (x *SystemStatusResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemStatusResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{11}
}

func (x *SystemStatusResponseStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetGoroutines() int64 {
	if x != nil {
		return x.Goroutines
	}
	return 0
}

func (x *SystemStatusResponseStruct) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *SystemStatusResponseStruct) GetMemoryKb() string {
	if x != nil {
		return x.MemoryKb
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetMemoryMb() string {
	if x != nil {
		return x.MemoryMb
	}
	return ""
}

func (x *SystemStatusResponseStruct) GetUptime() int32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

// формат запроса для system.traceGoroutine
type SystemTraceGoroutineRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceGoroutineRequestStruct) Reset() {
	*x = SystemTraceGoroutineRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceGoroutineRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceGoroutineRequestStruct) ProtoMessage() {}

func (x *SystemTraceGoroutineRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceGoroutineRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceGoroutineRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{12}
}

// формат ответа для system.traceGoroutine
type SystemTraceGoroutineResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceGoroutineResponseStruct) Reset() {
	*x = SystemTraceGoroutineResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceGoroutineResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceGoroutineResponseStruct) ProtoMessage() {}

func (x *SystemTraceGoroutineResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceGoroutineResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceGoroutineResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{13}
}

// формат запроса для system.traceMemory
type SystemTraceMemoryRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceMemoryRequestStruct) Reset() {
	*x = SystemTraceMemoryRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceMemoryRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceMemoryRequestStruct) ProtoMessage() {}

func (x *SystemTraceMemoryRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceMemoryRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceMemoryRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{14}
}

// формат ответа для system.traceMemory
type SystemTraceMemoryResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemTraceMemoryResponseStruct) Reset() {
	*x = SystemTraceMemoryResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTraceMemoryResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTraceMemoryResponseStruct) ProtoMessage() {}

func (x *SystemTraceMemoryResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTraceMemoryResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemTraceMemoryResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{15}
}

// формат запроса для system.cpuProfile
type SystemCpuProfileRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SystemCpuProfileRequestStruct) Reset() {
	*x = SystemCpuProfileRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCpuProfileRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCpuProfileRequestStruct) ProtoMessage() {}

func (x *SystemCpuProfileRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCpuProfileRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemCpuProfileRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{16}
}

func (x *SystemCpuProfileRequestStruct) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// формат ответа для system.cpuProfile
type SystemCpuProfileResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemCpuProfileResponseStruct) Reset() {
	*x = SystemCpuProfileResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCpuProfileResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCpuProfileResponseStruct) ProtoMessage() {}

func (x *SystemCpuProfileResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCpuProfileResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemCpuProfileResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{17}
}

// формат запроса для system.reloadConfig
type SystemReloadConfigRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadConfigRequestStruct) Reset() {
	*x = SystemReloadConfigRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadConfigRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadConfigRequestStruct) ProtoMessage() {}

func (x *SystemReloadConfigRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadConfigRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadConfigRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{18}
}

// формат ответа для system.reloadConfig
type SystemReloadConfigResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggingLevel   int32  `protobuf:"varint,1,opt,name=logging_level,json=loggingLevel,proto3" json:"logging_level,omitempty"`
	ServerType     string `protobuf:"bytes,2,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	TcpPort        int64  `protobuf:"varint,3,opt,name=tcp_port,json=tcpPort,proto3" json:"tcp_port,omitempty"`
	GrpcPort       int64  `protobuf:"varint,4,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	RabbitQueue    string `protobuf:"bytes,5,opt,name=rabbit_queue,json=rabbitQueue,proto3" json:"rabbit_queue,omitempty"`
	RabbitExchange string `protobuf:"bytes,6,opt,name=rabbit_exchange,json=rabbitExchange,proto3" json:"rabbit_exchange,omitempty"`
}

func (x *SystemReloadConfigResponseStruct) Reset() {
	*x = SystemReloadConfigResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadConfigResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadConfigResponseStruct) ProtoMessage() {}

func (x *SystemReloadConfigResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadConfigResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadConfigResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{19}
}

func (x *SystemReloadConfigResponseStruct) GetLoggingLevel() int32 {
	if x != nil {
		return x.LoggingLevel
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *SystemReloadConfigResponseStruct) GetTcpPort() int64 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetGrpcPort() int64 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *SystemReloadConfigResponseStruct) GetRabbitQueue() string {
	if x != nil {
		return x.RabbitQueue
	}
	return ""
}

func (x *SystemReloadConfigResponseStruct) GetRabbitExchange() string {
	if x != nil {
		return x.RabbitExchange
	}
	return ""
}

// формат запроса для system.reloadSharding
type SystemReloadShardingRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadShardingRequestStruct) Reset() {
	*x = SystemReloadShardingRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadShardingRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadShardingRequestStruct) ProtoMessage() {}

func (x *SystemReloadShardingRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadShardingRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadShardingRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{20}
}

// формат ответа для system.reloadSharding
type SystemReloadShardingResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemReloadShardingResponseStruct) Reset() {
	*x = SystemReloadShardingResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemReloadShardingResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemReloadShardingResponseStruct) ProtoMessage() {}

func (x *SystemReloadShardingResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemReloadShardingResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemReloadShardingResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{21}
}

// формат запроса для system.checkSharding
type SystemCheckShardingRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *SystemCheckShardingRequestStruct) Reset() {
	*x = SystemCheckShardingRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCheckShardingRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCheckShardingRequestStruct) ProtoMessage() {}

func (x *SystemCheckShardingRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCheckShardingRequestStruct.ProtoReflect.Descriptor instead.
func (*SystemCheckShardingRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{22}
}

func (x *SystemCheckShardingRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для system.checkSharding
type SystemCheckShardingResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemCheckShardingResponseStruct) Reset() {
	*x = SystemCheckShardingResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCheckShardingResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCheckShardingResponseStruct) ProtoMessage() {}

func (x *SystemCheckShardingResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCheckShardingResponseStruct.ProtoReflect.Descriptor instead.
func (*SystemCheckShardingResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{23}
}

// формат запроса для member.getList
type MemberGetListRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []int64 `protobuf:"varint,1,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	CompanyId  int64   `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *MemberGetListRequestStruct) Reset() {
	*x = MemberGetListRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberGetListRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberGetListRequestStruct) ProtoMessage() {}

func (x *MemberGetListRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberGetListRequestStruct.ProtoReflect.Descriptor instead.
func (*MemberGetListRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{24}
}

func (x *MemberGetListRequestStruct) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

func (x *MemberGetListRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат запроса для config.getList
type ConfigGetListRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyList   []string `protobuf:"bytes,1,rep,name=key_list,json=keyList,proto3" json:"key_list,omitempty"`
	CompanyId int64    `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ConfigGetListRequestStruct) Reset() {
	*x = ConfigGetListRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetListRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetListRequestStruct) ProtoMessage() {}

func (x *ConfigGetListRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetListRequestStruct.ProtoReflect.Descriptor instead.
func (*ConfigGetListRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{25}
}

func (x *ConfigGetListRequestStruct) GetKeyList() []string {
	if x != nil {
		return x.KeyList
	}
	return nil
}

func (x *ConfigGetListRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для member.getList
type MemberGetListResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberList   []*MemberInfoStruct `protobuf:"bytes,1,rep,name=member_list,json=memberList,proto3" json:"member_list,omitempty"`
	NotFoundList []int64             `protobuf:"varint,2,rep,packed,name=not_found_list,json=notFoundList,proto3" json:"not_found_list,omitempty"`
}

func (x *MemberGetListResponseStruct) Reset() {
	*x = MemberGetListResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberGetListResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberGetListResponseStruct) ProtoMessage() {}

func (x *MemberGetListResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberGetListResponseStruct.ProtoReflect.Descriptor instead.
func (*MemberGetListResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{26}
}

func (x *MemberGetListResponseStruct) GetMemberList() []*MemberInfoStruct {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *MemberGetListResponseStruct) GetNotFoundList() []int64 {
	if x != nil {
		return x.NotFoundList
	}
	return nil
}

// формат ответа для config.getList
type ConfigGetListResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyList      []*KeyInfoStruct `protobuf:"bytes,1,rep,name=key_list,json=keyList,proto3" json:"key_list,omitempty"`
	NotFoundList []string         `protobuf:"bytes,2,rep,name=not_found_list,json=notFoundList,proto3" json:"not_found_list,omitempty"`
}

func (x *ConfigGetListResponseStruct) Reset() {
	*x = ConfigGetListResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetListResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetListResponseStruct) ProtoMessage() {}

func (x *ConfigGetListResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetListResponseStruct.ProtoReflect.Descriptor instead.
func (*ConfigGetListResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigGetListResponseStruct) GetKeyList() []*KeyInfoStruct {
	if x != nil {
		return x.KeyList
	}
	return nil
}

func (x *ConfigGetListResponseStruct) GetNotFoundList() []string {
	if x != nil {
		return x.NotFoundList
	}
	return nil
}

// формат запроса для member.getShortList
type MemberGetShortListRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []int64 `protobuf:"varint,1,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	CompanyId  int64   `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *MemberGetShortListRequestStruct) Reset() {
	*x = MemberGetShortListRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberGetShortListRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberGetShortListRequestStruct) ProtoMessage() {}

func (x *MemberGetShortListRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberGetShortListRequestStruct.ProtoReflect.Descriptor instead.
func (*MemberGetShortListRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{28}
}

func (x *MemberGetShortListRequestStruct) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

func (x *MemberGetShortListRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для member.getShortList
type MemberGetShortListResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberList   []*MemberShortInfoStruct `protobuf:"bytes,1,rep,name=member_list,json=memberList,proto3" json:"member_list,omitempty"`
	NotFoundList []int64                  `protobuf:"varint,2,rep,packed,name=not_found_list,json=notFoundList,proto3" json:"not_found_list,omitempty"`
}

func (x *MemberGetShortListResponseStruct) Reset() {
	*x = MemberGetShortListResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberGetShortListResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberGetShortListResponseStruct) ProtoMessage() {}

func (x *MemberGetShortListResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberGetShortListResponseStruct.ProtoReflect.Descriptor instead.
func (*MemberGetShortListResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{29}
}

func (x *MemberGetShortListResponseStruct) GetMemberList() []*MemberShortInfoStruct {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *MemberGetShortListResponseStruct) GetNotFoundList() []int64 {
	if x != nil {
		return x.NotFoundList
	}
	return nil
}

// формат запроса для member.getOne
type MemberGetOneRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *MemberGetOneRequestStruct) Reset() {
	*x = MemberGetOneRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberGetOneRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberGetOneRequestStruct) ProtoMessage() {}

func (x *MemberGetOneRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberGetOneRequestStruct.ProtoReflect.Descriptor instead.
func (*MemberGetOneRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{30}
}

func (x *MemberGetOneRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemberGetOneRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат запроса для config.getOne
type ConfigGetOneRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CompanyId int64  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ConfigGetOneRequestStruct) Reset() {
	*x = ConfigGetOneRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetOneRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetOneRequestStruct) ProtoMessage() {}

func (x *ConfigGetOneRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetOneRequestStruct.ProtoReflect.Descriptor instead.
func (*ConfigGetOneRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{31}
}

func (x *ConfigGetOneRequestStruct) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigGetOneRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для member.getOne
type MemberGetOneResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *MemberInfoStruct `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Exist  bool              `protobuf:"varint,2,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *MemberGetOneResponseStruct) Reset() {
	*x = MemberGetOneResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberGetOneResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberGetOneResponseStruct) ProtoMessage() {}

func (x *MemberGetOneResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberGetOneResponseStruct.ProtoReflect.Descriptor instead.
func (*MemberGetOneResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{32}
}

func (x *MemberGetOneResponseStruct) GetMember() *MemberInfoStruct {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MemberGetOneResponseStruct) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

// формат ответа для config.getOne
type ConfigGetOneResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *KeyInfoStruct `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Exist bool           `protobuf:"varint,2,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *ConfigGetOneResponseStruct) Reset() {
	*x = ConfigGetOneResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetOneResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetOneResponseStruct) ProtoMessage() {}

func (x *ConfigGetOneResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetOneResponseStruct.ProtoReflect.Descriptor instead.
func (*ConfigGetOneResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{33}
}

func (x *ConfigGetOneResponseStruct) GetKey() *KeyInfoStruct {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ConfigGetOneResponseStruct) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

// структура записи конфига
type KeyInfoStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CreatedAt int32  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int32  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyInfoStruct) Reset() {
	*x = KeyInfoStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfoStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfoStruct) ProtoMessage() {}

func (x *KeyInfoStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfoStruct.ProtoReflect.Descriptor instead.
func (*KeyInfoStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{34}
}

func (x *KeyInfoStruct) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyInfoStruct) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *KeyInfoStruct) GetUpdatedAt() int32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *KeyInfoStruct) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// структура пользователя
type MemberShortInfoStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role        int32 `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
	NpcType     int32 `protobuf:"varint,3,opt,name=npc_type,json=npcType,proto3" json:"npc_type,omitempty"`
	Permissions int32 `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *MemberShortInfoStruct) Reset() {
	*x = MemberShortInfoStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberShortInfoStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberShortInfoStruct) ProtoMessage() {}

func (x *MemberShortInfoStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberShortInfoStruct.ProtoReflect.Descriptor instead.
func (*MemberShortInfoStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{35}
}

func (x *MemberShortInfoStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemberShortInfoStruct) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *MemberShortInfoStruct) GetNpcType() int32 {
	if x != nil {
		return x.NpcType
	}
	return 0
}

func (x *MemberShortInfoStruct) GetPermissions() int32 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

// структура пользователя
type MemberInfoStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Role              int32  `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
	NpcType           int32  `protobuf:"varint,3,opt,name=npc_type,json=npcType,proto3" json:"npc_type,omitempty"`
	Permissions       int32  `protobuf:"varint,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	CreatedAt         int32  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int32  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CompanyJoinedAt   int32  `protobuf:"varint,7,opt,name=company_joined_at,json=companyJoinedAt,proto3" json:"company_joined_at,omitempty"`
	FullnameUpdatedAt int32  `protobuf:"varint,8,opt,name=fullname_updated_at,json=fullnameUpdatedAt,proto3" json:"fullname_updated_at,omitempty"`
	Fullname          string `protobuf:"bytes,9,opt,name=fullname,proto3" json:"fullname,omitempty"`
	MbtiType          string `protobuf:"bytes,10,opt,name=mbti_type,json=mbtiType,proto3" json:"mbti_type,omitempty"`
	ShortDescription  string `protobuf:"bytes,11,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	AvatarFileKey     string `protobuf:"bytes,12,opt,name=avatar_file_key,json=avatarFileKey,proto3" json:"avatar_file_key,omitempty"`
	Comment           string `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	Extra             string `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra,omitempty"`
	LeftAt            int32  `protobuf:"varint,15,opt,name=left_at,json=leftAt,proto3" json:"left_at,omitempty"`
}

func (x *MemberInfoStruct) Reset() {
	*x = MemberInfoStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberInfoStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInfoStruct) ProtoMessage() {}

func (x *MemberInfoStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInfoStruct.ProtoReflect.Descriptor instead.
func (*MemberInfoStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{36}
}

func (x *MemberInfoStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemberInfoStruct) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *MemberInfoStruct) GetNpcType() int32 {
	if x != nil {
		return x.NpcType
	}
	return 0
}

func (x *MemberInfoStruct) GetPermissions() int32 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *MemberInfoStruct) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *MemberInfoStruct) GetUpdatedAt() int32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *MemberInfoStruct) GetCompanyJoinedAt() int32 {
	if x != nil {
		return x.CompanyJoinedAt
	}
	return 0
}

func (x *MemberInfoStruct) GetFullnameUpdatedAt() int32 {
	if x != nil {
		return x.FullnameUpdatedAt
	}
	return 0
}

func (x *MemberInfoStruct) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *MemberInfoStruct) GetMbtiType() string {
	if x != nil {
		return x.MbtiType
	}
	return ""
}

func (x *MemberInfoStruct) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *MemberInfoStruct) GetAvatarFileKey() string {
	if x != nil {
		return x.AvatarFileKey
	}
	return ""
}

func (x *MemberInfoStruct) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MemberInfoStruct) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *MemberInfoStruct) GetLeftAt() int32 {
	if x != nil {
		return x.LeftAt
	}
	return 0
}

// формат запроса для member.DeleteFromCacheByUserId
type MemberDeleteFromCacheByUserIdRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CompanyId int64 `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *MemberDeleteFromCacheByUserIdRequestStruct) Reset() {
	*x = MemberDeleteFromCacheByUserIdRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberDeleteFromCacheByUserIdRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberDeleteFromCacheByUserIdRequestStruct) ProtoMessage() {}

func (x *MemberDeleteFromCacheByUserIdRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberDeleteFromCacheByUserIdRequestStruct.ProtoReflect.Descriptor instead.
func (*MemberDeleteFromCacheByUserIdRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{37}
}

func (x *MemberDeleteFromCacheByUserIdRequestStruct) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemberDeleteFromCacheByUserIdRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат запроса для member.DeleteFromCacheByUserIdList
type MemberDeleteFromCacheByUserIdListRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdList []int64 `protobuf:"varint,1,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	CompanyId  int64   `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *MemberDeleteFromCacheByUserIdListRequestStruct) Reset() {
	*x = MemberDeleteFromCacheByUserIdListRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberDeleteFromCacheByUserIdListRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberDeleteFromCacheByUserIdListRequestStruct) ProtoMessage() {}

func (x *MemberDeleteFromCacheByUserIdListRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberDeleteFromCacheByUserIdListRequestStruct.ProtoReflect.Descriptor instead.
func (*MemberDeleteFromCacheByUserIdListRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{38}
}

func (x *MemberDeleteFromCacheByUserIdListRequestStruct) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

func (x *MemberDeleteFromCacheByUserIdListRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат запроса для config.DeleteFromCacheByKey
type ConfigDeleteFromCacheByKeyRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CompanyId int64  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ConfigDeleteFromCacheByKeyRequestStruct) Reset() {
	*x = ConfigDeleteFromCacheByKeyRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDeleteFromCacheByKeyRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDeleteFromCacheByKeyRequestStruct) ProtoMessage() {}

func (x *ConfigDeleteFromCacheByKeyRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDeleteFromCacheByKeyRequestStruct.ProtoReflect.Descriptor instead.
func (*ConfigDeleteFromCacheByKeyRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{39}
}

func (x *ConfigDeleteFromCacheByKeyRequestStruct) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigDeleteFromCacheByKeyRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для member.DeleteFromCacheByUserId
type MemberDeleteFromCacheByUserIdResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MemberDeleteFromCacheByUserIdResponseStruct) Reset() {
	*x = MemberDeleteFromCacheByUserIdResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberDeleteFromCacheByUserIdResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberDeleteFromCacheByUserIdResponseStruct) ProtoMessage() {}

func (x *MemberDeleteFromCacheByUserIdResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberDeleteFromCacheByUserIdResponseStruct.ProtoReflect.Descriptor instead.
func (*MemberDeleteFromCacheByUserIdResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{40}
}

// формат ответа для member.DeleteFromCacheByUserIdList
type MemberDeleteFromCacheByUserIdListResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MemberDeleteFromCacheByUserIdListResponseStruct) Reset() {
	*x = MemberDeleteFromCacheByUserIdListResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberDeleteFromCacheByUserIdListResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberDeleteFromCacheByUserIdListResponseStruct) ProtoMessage() {}

func (x *MemberDeleteFromCacheByUserIdListResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberDeleteFromCacheByUserIdListResponseStruct.ProtoReflect.Descriptor instead.
func (*MemberDeleteFromCacheByUserIdListResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{41}
}

// формат ответа для config.DeleteFromCacheByKey
type ConfigDeleteFromCacheByKeyResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigDeleteFromCacheByKeyResponseStruct) Reset() {
	*x = ConfigDeleteFromCacheByKeyResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDeleteFromCacheByKeyResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDeleteFromCacheByKeyResponseStruct) ProtoMessage() {}

func (x *ConfigDeleteFromCacheByKeyResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDeleteFromCacheByKeyResponseStruct.ProtoReflect.Descriptor instead.
func (*ConfigDeleteFromCacheByKeyResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{42}
}

// формат запроса для member.clearCache
type MemberClearCacheRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *MemberClearCacheRequestStruct) Reset() {
	*x = MemberClearCacheRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberClearCacheRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberClearCacheRequestStruct) ProtoMessage() {}

func (x *MemberClearCacheRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberClearCacheRequestStruct.ProtoReflect.Descriptor instead.
func (*MemberClearCacheRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{43}
}

func (x *MemberClearCacheRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат запроса для config.clearCache
type ConfigClearCacheRequestStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int64 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *ConfigClearCacheRequestStruct) Reset() {
	*x = ConfigClearCacheRequestStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigClearCacheRequestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigClearCacheRequestStruct) ProtoMessage() {}

func (x *ConfigClearCacheRequestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigClearCacheRequestStruct.ProtoReflect.Descriptor instead.
func (*ConfigClearCacheRequestStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{44}
}

func (x *ConfigClearCacheRequestStruct) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

// формат ответа для member.clearCache
type MemberClearCacheResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MemberClearCacheResponseStruct) Reset() {
	*x = MemberClearCacheResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberClearCacheResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberClearCacheResponseStruct) ProtoMessage() {}

func (x *MemberClearCacheResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberClearCacheResponseStruct.ProtoReflect.Descriptor instead.
func (*MemberClearCacheResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{45}
}

// формат ответа для config.clearCache
type ConfigClearCacheResponseStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigClearCacheResponseStruct) Reset() {
	*x = ConfigClearCacheResponseStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_go_company_cache_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigClearCacheResponseStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigClearCacheResponseStruct) ProtoMessage() {}

func (x *ConfigClearCacheResponseStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_go_company_cache_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigClearCacheResponseStruct.ProtoReflect.Descriptor instead.
func (*ConfigClearCacheResponseStruct) Descriptor() ([]byte, []int) {
	return file_proto_go_company_cache_proto_rawDescGZIP(), []int{46}
}

var File_proto_go_company_cache_proto protoreflect.FileDescriptor

var file_proto_go_company_cache_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x22, 0x5f, 0x0a, 0x1b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x22, 0xc1, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x61,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x23, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x24, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x22, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x6b, 0x0a,
	0x27, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x3f, 0x0a, 0x1e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x62, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x20, 0x0a, 0x1e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x33, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70,
	0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0xec,
	0x01, 0x0a, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x63, 0x70,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x63, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x23, 0x0a,
	0x21, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x41, 0x0a, 0x20, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x5d, 0x0a, 0x1a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22,
	0x56, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x7f, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x1f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x20, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x19,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x22, 0x4c, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22,
	0x6e, 0x0a, 0x1a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3a, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22,
	0x65, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x31, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xed, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x62, 0x74, 0x69, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x62, 0x74, 0x69, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x66, 0x74, 0x41,
	0x74, 0x22, 0x64, 0x0a, 0x2a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x27, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x2b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x31, 0x0a, 0x2f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x3e, 0x0a, 0x1d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x32, 0xab, 0x16, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x71, 0x0a, 0x0e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a,
	0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x71, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x71, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x11, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x47,
	0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x70,
	0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a,
	0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x21, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12,
	0x77, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47,
	0x65, 0x74, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x12, 0x77, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_go_company_cache_proto_rawDescOnce sync.Once
	file_proto_go_company_cache_proto_rawDescData = file_proto_go_company_cache_proto_rawDesc
)

func file_proto_go_company_cache_proto_rawDescGZIP() []byte {
	file_proto_go_company_cache_proto_rawDescOnce.Do(func() {
		file_proto_go_company_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_go_company_cache_proto_rawDescData)
	})
	return file_proto_go_company_cache_proto_rawDescData
}

var file_proto_go_company_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_proto_go_company_cache_proto_goTypes = []interface{}{
	(*SessionGetInfoRequestStruct)(nil),                     // 0: companyCacheGrpc.SessionGetInfoRequestStruct
	(*SessionGetInfoResponseStruct)(nil),                    // 1: companyCacheGrpc.SessionGetInfoResponseStruct
	(*SessionGetListByUserIdRequestStruct)(nil),             // 2: companyCacheGrpc.SessionGetListByUserIdRequestStruct
	(*SessionGetListByUserIdResponseStruct)(nil),            // 3: companyCacheGrpc.SessionGetListByUserIdResponseStruct
	(*SessionDeleteByUserIdRequestStruct)(nil),              // 4: companyCacheGrpc.SessionDeleteByUserIdRequestStruct
	(*SessionDeleteByUserIdResponseStruct)(nil),             // 5: companyCacheGrpc.SessionDeleteByUserIdResponseStruct
	(*SessionDeleteBySessionUniqRequestStruct)(nil),         // 6: companyCacheGrpc.SessionDeleteBySessionUniqRequestStruct
	(*SessionDeleteBySessionUniqResponseStruct)(nil),        // 7: companyCacheGrpc.SessionDeleteBySessionUniqResponseStruct
	(*SessionClearCacheRequestStruct)(nil),                  // 8: companyCacheGrpc.SessionClearCacheRequestStruct
	(*SessionClearCacheResponseStruct)(nil),                 // 9: companyCacheGrpc.SessionClearCacheResponseStruct
	(*SystemStatusRequestStruct)(nil),                       // 10: companyCacheGrpc.SystemStatusRequestStruct
	(*SystemStatusResponseStruct)(nil),                      // 11: companyCacheGrpc.SystemStatusResponseStruct
	(*SystemTraceGoroutineRequestStruct)(nil),               // 12: companyCacheGrpc.SystemTraceGoroutineRequestStruct
	(*SystemTraceGoroutineResponseStruct)(nil),              // 13: companyCacheGrpc.SystemTraceGoroutineResponseStruct
	(*SystemTraceMemoryRequestStruct)(nil),                  // 14: companyCacheGrpc.SystemTraceMemoryRequestStruct
	(*SystemTraceMemoryResponseStruct)(nil),                 // 15: companyCacheGrpc.SystemTraceMemoryResponseStruct
	(*SystemCpuProfileRequestStruct)(nil),                   // 16: companyCacheGrpc.SystemCpuProfileRequestStruct
	(*SystemCpuProfileResponseStruct)(nil),                  // 17: companyCacheGrpc.SystemCpuProfileResponseStruct
	(*SystemReloadConfigRequestStruct)(nil),                 // 18: companyCacheGrpc.SystemReloadConfigRequestStruct
	(*SystemReloadConfigResponseStruct)(nil),                // 19: companyCacheGrpc.SystemReloadConfigResponseStruct
	(*SystemReloadShardingRequestStruct)(nil),               // 20: companyCacheGrpc.SystemReloadShardingRequestStruct
	(*SystemReloadShardingResponseStruct)(nil),              // 21: companyCacheGrpc.SystemReloadShardingResponseStruct
	(*SystemCheckShardingRequestStruct)(nil),                // 22: companyCacheGrpc.SystemCheckShardingRequestStruct
	(*SystemCheckShardingResponseStruct)(nil),               // 23: companyCacheGrpc.SystemCheckShardingResponseStruct
	(*MemberGetListRequestStruct)(nil),                      // 24: companyCacheGrpc.MemberGetListRequestStruct
	(*ConfigGetListRequestStruct)(nil),                      // 25: companyCacheGrpc.ConfigGetListRequestStruct
	(*MemberGetListResponseStruct)(nil),                     // 26: companyCacheGrpc.MemberGetListResponseStruct
	(*ConfigGetListResponseStruct)(nil),                     // 27: companyCacheGrpc.ConfigGetListResponseStruct
	(*MemberGetShortListRequestStruct)(nil),                 // 28: companyCacheGrpc.MemberGetShortListRequestStruct
	(*MemberGetShortListResponseStruct)(nil),                // 29: companyCacheGrpc.MemberGetShortListResponseStruct
	(*MemberGetOneRequestStruct)(nil),                       // 30: companyCacheGrpc.MemberGetOneRequestStruct
	(*ConfigGetOneRequestStruct)(nil),                       // 31: companyCacheGrpc.ConfigGetOneRequestStruct
	(*MemberGetOneResponseStruct)(nil),                      // 32: companyCacheGrpc.MemberGetOneResponseStruct
	(*ConfigGetOneResponseStruct)(nil),                      // 33: companyCacheGrpc.ConfigGetOneResponseStruct
	(*KeyInfoStruct)(nil),                                   // 34: companyCacheGrpc.KeyInfoStruct
	(*MemberShortInfoStruct)(nil),                           // 35: companyCacheGrpc.MemberShortInfoStruct
	(*MemberInfoStruct)(nil),                                // 36: companyCacheGrpc.MemberInfoStruct
	(*MemberDeleteFromCacheByUserIdRequestStruct)(nil),      // 37: companyCacheGrpc.MemberDeleteFromCacheByUserIdRequestStruct
	(*MemberDeleteFromCacheByUserIdListRequestStruct)(nil),  // 38: companyCacheGrpc.MemberDeleteFromCacheByUserIdListRequestStruct
	(*ConfigDeleteFromCacheByKeyRequestStruct)(nil),         // 39: companyCacheGrpc.ConfigDeleteFromCacheByKeyRequestStruct
	(*MemberDeleteFromCacheByUserIdResponseStruct)(nil),     // 40: companyCacheGrpc.MemberDeleteFromCacheByUserIdResponseStruct
	(*MemberDeleteFromCacheByUserIdListResponseStruct)(nil), // 41: companyCacheGrpc.MemberDeleteFromCacheByUserIdListResponseStruct
	(*ConfigDeleteFromCacheByKeyResponseStruct)(nil),        // 42: companyCacheGrpc.ConfigDeleteFromCacheByKeyResponseStruct
	(*MemberClearCacheRequestStruct)(nil),                   // 43: companyCacheGrpc.MemberClearCacheRequestStruct
	(*ConfigClearCacheRequestStruct)(nil),                   // 44: companyCacheGrpc.ConfigClearCacheRequestStruct
	(*MemberClearCacheResponseStruct)(nil),                  // 45: companyCacheGrpc.MemberClearCacheResponseStruct
	(*ConfigClearCacheResponseStruct)(nil),                  // 46: companyCacheGrpc.ConfigClearCacheResponseStruct
}
var file_proto_go_company_cache_proto_depIdxs = []int32{
	36, // 0: companyCacheGrpc.SessionGetInfoResponseStruct.member:type_name -> companyCacheGrpc.MemberInfoStruct
	36, // 1: companyCacheGrpc.MemberGetListResponseStruct.member_list:type_name -> companyCacheGrpc.MemberInfoStruct
	34, // 2: companyCacheGrpc.ConfigGetListResponseStruct.key_list:type_name -> companyCacheGrpc.KeyInfoStruct
	35, // 3: companyCacheGrpc.MemberGetShortListResponseStruct.member_list:type_name -> companyCacheGrpc.MemberShortInfoStruct
	36, // 4: companyCacheGrpc.MemberGetOneResponseStruct.member:type_name -> companyCacheGrpc.MemberInfoStruct
	34, // 5: companyCacheGrpc.ConfigGetOneResponseStruct.key:type_name -> companyCacheGrpc.KeyInfoStruct
	0,  // 6: companyCacheGrpc.companyCache.SessionGetInfo:input_type -> companyCacheGrpc.SessionGetInfoRequestStruct
	4,  // 7: companyCacheGrpc.companyCache.SessionDeleteByUserId:input_type -> companyCacheGrpc.SessionDeleteByUserIdRequestStruct
	6,  // 8: companyCacheGrpc.companyCache.SessionDeleteBySessionUniq:input_type -> companyCacheGrpc.SessionDeleteBySessionUniqRequestStruct
	2,  // 9: companyCacheGrpc.companyCache.SessionGetListByUserId:input_type -> companyCacheGrpc.SessionGetListByUserIdRequestStruct
	8,  // 10: companyCacheGrpc.companyCache.SessionClearCache:input_type -> companyCacheGrpc.SessionClearCacheRequestStruct
	10, // 11: companyCacheGrpc.companyCache.SystemStatus:input_type -> companyCacheGrpc.SystemStatusRequestStruct
	12, // 12: companyCacheGrpc.companyCache.SystemTraceGoroutine:input_type -> companyCacheGrpc.SystemTraceGoroutineRequestStruct
	14, // 13: companyCacheGrpc.companyCache.SystemTraceMemory:input_type -> companyCacheGrpc.SystemTraceMemoryRequestStruct
	16, // 14: companyCacheGrpc.companyCache.SystemCpuProfile:input_type -> companyCacheGrpc.SystemCpuProfileRequestStruct
	18, // 15: companyCacheGrpc.companyCache.SystemReloadConfig:input_type -> companyCacheGrpc.SystemReloadConfigRequestStruct
	20, // 16: companyCacheGrpc.companyCache.SystemReloadSharding:input_type -> companyCacheGrpc.SystemReloadShardingRequestStruct
	22, // 17: companyCacheGrpc.companyCache.SystemCheckSharding:input_type -> companyCacheGrpc.SystemCheckShardingRequestStruct
	24, // 18: companyCacheGrpc.companyCache.MemberGetList:input_type -> companyCacheGrpc.MemberGetListRequestStruct
	28, // 19: companyCacheGrpc.companyCache.MemberGetShortList:input_type -> companyCacheGrpc.MemberGetShortListRequestStruct
	30, // 20: companyCacheGrpc.companyCache.MemberGetOne:input_type -> companyCacheGrpc.MemberGetOneRequestStruct
	37, // 21: companyCacheGrpc.companyCache.MemberDeleteFromCacheByUserId:input_type -> companyCacheGrpc.MemberDeleteFromCacheByUserIdRequestStruct
	38, // 22: companyCacheGrpc.companyCache.MemberDeleteFromCacheByUserIdList:input_type -> companyCacheGrpc.MemberDeleteFromCacheByUserIdListRequestStruct
	43, // 23: companyCacheGrpc.companyCache.MemberClearCache:input_type -> companyCacheGrpc.MemberClearCacheRequestStruct
	25, // 24: companyCacheGrpc.companyCache.ConfigGetList:input_type -> companyCacheGrpc.ConfigGetListRequestStruct
	31, // 25: companyCacheGrpc.companyCache.ConfigGetOne:input_type -> companyCacheGrpc.ConfigGetOneRequestStruct
	39, // 26: companyCacheGrpc.companyCache.ConfigDeleteFromCacheByKey:input_type -> companyCacheGrpc.ConfigDeleteFromCacheByKeyRequestStruct
	44, // 27: companyCacheGrpc.companyCache.ConfigClearCache:input_type -> companyCacheGrpc.ConfigClearCacheRequestStruct
	1,  // 28: companyCacheGrpc.companyCache.SessionGetInfo:output_type -> companyCacheGrpc.SessionGetInfoResponseStruct
	5,  // 29: companyCacheGrpc.companyCache.SessionDeleteByUserId:output_type -> companyCacheGrpc.SessionDeleteByUserIdResponseStruct
	7,  // 30: companyCacheGrpc.companyCache.SessionDeleteBySessionUniq:output_type -> companyCacheGrpc.SessionDeleteBySessionUniqResponseStruct
	3,  // 31: companyCacheGrpc.companyCache.SessionGetListByUserId:output_type -> companyCacheGrpc.SessionGetListByUserIdResponseStruct
	9,  // 32: companyCacheGrpc.companyCache.SessionClearCache:output_type -> companyCacheGrpc.SessionClearCacheResponseStruct
	11, // 33: companyCacheGrpc.companyCache.SystemStatus:output_type -> companyCacheGrpc.SystemStatusResponseStruct
	13, // 34: companyCacheGrpc.companyCache.SystemTraceGoroutine:output_type -> companyCacheGrpc.SystemTraceGoroutineResponseStruct
	15, // 35: companyCacheGrpc.companyCache.SystemTraceMemory:output_type -> companyCacheGrpc.SystemTraceMemoryResponseStruct
	17, // 36: companyCacheGrpc.companyCache.SystemCpuProfile:output_type -> companyCacheGrpc.SystemCpuProfileResponseStruct
	19, // 37: companyCacheGrpc.companyCache.SystemReloadConfig:output_type -> companyCacheGrpc.SystemReloadConfigResponseStruct
	21, // 38: companyCacheGrpc.companyCache.SystemReloadSharding:output_type -> companyCacheGrpc.SystemReloadShardingResponseStruct
	23, // 39: companyCacheGrpc.companyCache.SystemCheckSharding:output_type -> companyCacheGrpc.SystemCheckShardingResponseStruct
	26, // 40: companyCacheGrpc.companyCache.MemberGetList:output_type -> companyCacheGrpc.MemberGetListResponseStruct
	29, // 41: companyCacheGrpc.companyCache.MemberGetShortList:output_type -> companyCacheGrpc.MemberGetShortListResponseStruct
	32, // 42: companyCacheGrpc.companyCache.MemberGetOne:output_type -> companyCacheGrpc.MemberGetOneResponseStruct
	40, // 43: companyCacheGrpc.companyCache.MemberDeleteFromCacheByUserId:output_type -> companyCacheGrpc.MemberDeleteFromCacheByUserIdResponseStruct
	41, // 44: companyCacheGrpc.companyCache.MemberDeleteFromCacheByUserIdList:output_type -> companyCacheGrpc.MemberDeleteFromCacheByUserIdListResponseStruct
	45, // 45: companyCacheGrpc.companyCache.MemberClearCache:output_type -> companyCacheGrpc.MemberClearCacheResponseStruct
	27, // 46: companyCacheGrpc.companyCache.ConfigGetList:output_type -> companyCacheGrpc.ConfigGetListResponseStruct
	33, // 47: companyCacheGrpc.companyCache.ConfigGetOne:output_type -> companyCacheGrpc.ConfigGetOneResponseStruct
	42, // 48: companyCacheGrpc.companyCache.ConfigDeleteFromCacheByKey:output_type -> companyCacheGrpc.ConfigDeleteFromCacheByKeyResponseStruct
	46, // 49: companyCacheGrpc.companyCache.ConfigClearCache:output_type -> companyCacheGrpc.ConfigClearCacheResponseStruct
	28, // [28:50] is the sub-list for method output_type
	6,  // [6:28] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_proto_go_company_cache_proto_init() }
func file_proto_go_company_cache_proto_init() {
	if File_proto_go_company_cache_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_go_company_cache_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGetInfoRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGetInfoResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGetListByUserIdRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGetListByUserIdResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteByUserIdRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteByUserIdResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteBySessionUniqRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDeleteBySessionUniqResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionClearCacheRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionClearCacheResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceGoroutineRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceGoroutineResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceMemoryRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTraceMemoryResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCpuProfileRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCpuProfileResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadConfigRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadConfigResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadShardingRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemReloadShardingResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCheckShardingRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCheckShardingResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberGetListRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetListRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberGetListResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetListResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberGetShortListRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberGetShortListResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberGetOneRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetOneRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberGetOneResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGetOneResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfoStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberShortInfoStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberInfoStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberDeleteFromCacheByUserIdRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberDeleteFromCacheByUserIdListRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDeleteFromCacheByKeyRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberDeleteFromCacheByUserIdResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberDeleteFromCacheByUserIdListResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDeleteFromCacheByKeyResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberClearCacheRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigClearCacheRequestStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberClearCacheResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_go_company_cache_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigClearCacheResponseStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_go_company_cache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_go_company_cache_proto_goTypes,
		DependencyIndexes: file_proto_go_company_cache_proto_depIdxs,
		MessageInfos:      file_proto_go_company_cache_proto_msgTypes,
	}.Build()
	File_proto_go_company_cache_proto = out.File
	file_proto_go_company_cache_proto_rawDesc = nil
	file_proto_go_company_cache_proto_goTypes = nil
	file_proto_go_company_cache_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompanyCacheClient is the client API for CompanyCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyCacheClient interface {
	SessionGetInfo(ctx context.Context, in *SessionGetInfoRequestStruct, opts ...grpc.CallOption) (*SessionGetInfoResponseStruct, error)
	SessionDeleteByUserId(ctx context.Context, in *SessionDeleteByUserIdRequestStruct, opts ...grpc.CallOption) (*SessionDeleteByUserIdResponseStruct, error)
	SessionDeleteBySessionUniq(ctx context.Context, in *SessionDeleteBySessionUniqRequestStruct, opts ...grpc.CallOption) (*SessionDeleteBySessionUniqResponseStruct, error)
	SessionGetListByUserId(ctx context.Context, in *SessionGetListByUserIdRequestStruct, opts ...grpc.CallOption) (*SessionGetListByUserIdResponseStruct, error)
	SessionClearCache(ctx context.Context, in *SessionClearCacheRequestStruct, opts ...grpc.CallOption) (*SessionClearCacheResponseStruct, error)
	SystemStatus(ctx context.Context, in *SystemStatusRequestStruct, opts ...grpc.CallOption) (*SystemStatusResponseStruct, error)
	SystemTraceGoroutine(ctx context.Context, in *SystemTraceGoroutineRequestStruct, opts ...grpc.CallOption) (*SystemTraceGoroutineResponseStruct, error)
	SystemTraceMemory(ctx context.Context, in *SystemTraceMemoryRequestStruct, opts ...grpc.CallOption) (*SystemTraceMemoryResponseStruct, error)
	SystemCpuProfile(ctx context.Context, in *SystemCpuProfileRequestStruct, opts ...grpc.CallOption) (*SystemCpuProfileResponseStruct, error)
	SystemReloadConfig(ctx context.Context, in *SystemReloadConfigRequestStruct, opts ...grpc.CallOption) (*SystemReloadConfigResponseStruct, error)
	SystemReloadSharding(ctx context.Context, in *SystemReloadShardingRequestStruct, opts ...grpc.CallOption) (*SystemReloadShardingResponseStruct, error)
	SystemCheckSharding(ctx context.Context, in *SystemCheckShardingRequestStruct, opts ...grpc.CallOption) (*SystemCheckShardingResponseStruct, error)
	MemberGetList(ctx context.Context, in *MemberGetListRequestStruct, opts ...grpc.CallOption) (*MemberGetListResponseStruct, error)
	MemberGetShortList(ctx context.Context, in *MemberGetShortListRequestStruct, opts ...grpc.CallOption) (*MemberGetShortListResponseStruct, error)
	MemberGetOne(ctx context.Context, in *MemberGetOneRequestStruct, opts ...grpc.CallOption) (*MemberGetOneResponseStruct, error)
	MemberDeleteFromCacheByUserId(ctx context.Context, in *MemberDeleteFromCacheByUserIdRequestStruct, opts ...grpc.CallOption) (*MemberDeleteFromCacheByUserIdResponseStruct, error)
	MemberDeleteFromCacheByUserIdList(ctx context.Context, in *MemberDeleteFromCacheByUserIdListRequestStruct, opts ...grpc.CallOption) (*MemberDeleteFromCacheByUserIdListResponseStruct, error)
	MemberClearCache(ctx context.Context, in *MemberClearCacheRequestStruct, opts ...grpc.CallOption) (*MemberClearCacheResponseStruct, error)
	ConfigGetList(ctx context.Context, in *ConfigGetListRequestStruct, opts ...grpc.CallOption) (*ConfigGetListResponseStruct, error)
	ConfigGetOne(ctx context.Context, in *ConfigGetOneRequestStruct, opts ...grpc.CallOption) (*ConfigGetOneResponseStruct, error)
	ConfigDeleteFromCacheByKey(ctx context.Context, in *ConfigDeleteFromCacheByKeyRequestStruct, opts ...grpc.CallOption) (*ConfigDeleteFromCacheByKeyResponseStruct, error)
	ConfigClearCache(ctx context.Context, in *ConfigClearCacheRequestStruct, opts ...grpc.CallOption) (*ConfigClearCacheResponseStruct, error)
}

type companyCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyCacheClient(cc grpc.ClientConnInterface) CompanyCacheClient {
	return &companyCacheClient{cc}
}

func (c *companyCacheClient) SessionGetInfo(ctx context.Context, in *SessionGetInfoRequestStruct, opts ...grpc.CallOption) (*SessionGetInfoResponseStruct, error) {
	out := new(SessionGetInfoResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SessionGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SessionDeleteByUserId(ctx context.Context, in *SessionDeleteByUserIdRequestStruct, opts ...grpc.CallOption) (*SessionDeleteByUserIdResponseStruct, error) {
	out := new(SessionDeleteByUserIdResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SessionDeleteByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SessionDeleteBySessionUniq(ctx context.Context, in *SessionDeleteBySessionUniqRequestStruct, opts ...grpc.CallOption) (*SessionDeleteBySessionUniqResponseStruct, error) {
	out := new(SessionDeleteBySessionUniqResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SessionDeleteBySessionUniq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SessionGetListByUserId(ctx context.Context, in *SessionGetListByUserIdRequestStruct, opts ...grpc.CallOption) (*SessionGetListByUserIdResponseStruct, error) {
	out := new(SessionGetListByUserIdResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SessionGetListByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SessionClearCache(ctx context.Context, in *SessionClearCacheRequestStruct, opts ...grpc.CallOption) (*SessionClearCacheResponseStruct, error) {
	out := new(SessionClearCacheResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SessionClearCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SystemStatus(ctx context.Context, in *SystemStatusRequestStruct, opts ...grpc.CallOption) (*SystemStatusResponseStruct, error) {
	out := new(SystemStatusResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SystemTraceGoroutine(ctx context.Context, in *SystemTraceGoroutineRequestStruct, opts ...grpc.CallOption) (*SystemTraceGoroutineResponseStruct, error) {
	out := new(SystemTraceGoroutineResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SystemTraceGoroutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SystemTraceMemory(ctx context.Context, in *SystemTraceMemoryRequestStruct, opts ...grpc.CallOption) (*SystemTraceMemoryResponseStruct, error) {
	out := new(SystemTraceMemoryResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SystemTraceMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SystemCpuProfile(ctx context.Context, in *SystemCpuProfileRequestStruct, opts ...grpc.CallOption) (*SystemCpuProfileResponseStruct, error) {
	out := new(SystemCpuProfileResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SystemCpuProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SystemReloadConfig(ctx context.Context, in *SystemReloadConfigRequestStruct, opts ...grpc.CallOption) (*SystemReloadConfigResponseStruct, error) {
	out := new(SystemReloadConfigResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SystemReloadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SystemReloadSharding(ctx context.Context, in *SystemReloadShardingRequestStruct, opts ...grpc.CallOption) (*SystemReloadShardingResponseStruct, error) {
	out := new(SystemReloadShardingResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SystemReloadSharding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) SystemCheckSharding(ctx context.Context, in *SystemCheckShardingRequestStruct, opts ...grpc.CallOption) (*SystemCheckShardingResponseStruct, error) {
	out := new(SystemCheckShardingResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/SystemCheckSharding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) MemberGetList(ctx context.Context, in *MemberGetListRequestStruct, opts ...grpc.CallOption) (*MemberGetListResponseStruct, error) {
	out := new(MemberGetListResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/MemberGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) MemberGetShortList(ctx context.Context, in *MemberGetShortListRequestStruct, opts ...grpc.CallOption) (*MemberGetShortListResponseStruct, error) {
	out := new(MemberGetShortListResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/MemberGetShortList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) MemberGetOne(ctx context.Context, in *MemberGetOneRequestStruct, opts ...grpc.CallOption) (*MemberGetOneResponseStruct, error) {
	out := new(MemberGetOneResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/MemberGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) MemberDeleteFromCacheByUserId(ctx context.Context, in *MemberDeleteFromCacheByUserIdRequestStruct, opts ...grpc.CallOption) (*MemberDeleteFromCacheByUserIdResponseStruct, error) {
	out := new(MemberDeleteFromCacheByUserIdResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/MemberDeleteFromCacheByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) MemberDeleteFromCacheByUserIdList(ctx context.Context, in *MemberDeleteFromCacheByUserIdListRequestStruct, opts ...grpc.CallOption) (*MemberDeleteFromCacheByUserIdListResponseStruct, error) {
	out := new(MemberDeleteFromCacheByUserIdListResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/MemberDeleteFromCacheByUserIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) MemberClearCache(ctx context.Context, in *MemberClearCacheRequestStruct, opts ...grpc.CallOption) (*MemberClearCacheResponseStruct, error) {
	out := new(MemberClearCacheResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/MemberClearCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) ConfigGetList(ctx context.Context, in *ConfigGetListRequestStruct, opts ...grpc.CallOption) (*ConfigGetListResponseStruct, error) {
	out := new(ConfigGetListResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/ConfigGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) ConfigGetOne(ctx context.Context, in *ConfigGetOneRequestStruct, opts ...grpc.CallOption) (*ConfigGetOneResponseStruct, error) {
	out := new(ConfigGetOneResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/ConfigGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) ConfigDeleteFromCacheByKey(ctx context.Context, in *ConfigDeleteFromCacheByKeyRequestStruct, opts ...grpc.CallOption) (*ConfigDeleteFromCacheByKeyResponseStruct, error) {
	out := new(ConfigDeleteFromCacheByKeyResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/ConfigDeleteFromCacheByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyCacheClient) ConfigClearCache(ctx context.Context, in *ConfigClearCacheRequestStruct, opts ...grpc.CallOption) (*ConfigClearCacheResponseStruct, error) {
	out := new(ConfigClearCacheResponseStruct)
	err := c.cc.Invoke(ctx, "/companyCacheGrpc.companyCache/ConfigClearCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyCacheServer is the server API for CompanyCache service.
type CompanyCacheServer interface {
	SessionGetInfo(context.Context, *SessionGetInfoRequestStruct) (*SessionGetInfoResponseStruct, error)
	SessionDeleteByUserId(context.Context, *SessionDeleteByUserIdRequestStruct) (*SessionDeleteByUserIdResponseStruct, error)
	SessionDeleteBySessionUniq(context.Context, *SessionDeleteBySessionUniqRequestStruct) (*SessionDeleteBySessionUniqResponseStruct, error)
	SessionGetListByUserId(context.Context, *SessionGetListByUserIdRequestStruct) (*SessionGetListByUserIdResponseStruct, error)
	SessionClearCache(context.Context, *SessionClearCacheRequestStruct) (*SessionClearCacheResponseStruct, error)
	SystemStatus(context.Context, *SystemStatusRequestStruct) (*SystemStatusResponseStruct, error)
	SystemTraceGoroutine(context.Context, *SystemTraceGoroutineRequestStruct) (*SystemTraceGoroutineResponseStruct, error)
	SystemTraceMemory(context.Context, *SystemTraceMemoryRequestStruct) (*SystemTraceMemoryResponseStruct, error)
	SystemCpuProfile(context.Context, *SystemCpuProfileRequestStruct) (*SystemCpuProfileResponseStruct, error)
	SystemReloadConfig(context.Context, *SystemReloadConfigRequestStruct) (*SystemReloadConfigResponseStruct, error)
	SystemReloadSharding(context.Context, *SystemReloadShardingRequestStruct) (*SystemReloadShardingResponseStruct, error)
	SystemCheckSharding(context.Context, *SystemCheckShardingRequestStruct) (*SystemCheckShardingResponseStruct, error)
	MemberGetList(context.Context, *MemberGetListRequestStruct) (*MemberGetListResponseStruct, error)
	MemberGetShortList(context.Context, *MemberGetShortListRequestStruct) (*MemberGetShortListResponseStruct, error)
	MemberGetOne(context.Context, *MemberGetOneRequestStruct) (*MemberGetOneResponseStruct, error)
	MemberDeleteFromCacheByUserId(context.Context, *MemberDeleteFromCacheByUserIdRequestStruct) (*MemberDeleteFromCacheByUserIdResponseStruct, error)
	MemberDeleteFromCacheByUserIdList(context.Context, *MemberDeleteFromCacheByUserIdListRequestStruct) (*MemberDeleteFromCacheByUserIdListResponseStruct, error)
	MemberClearCache(context.Context, *MemberClearCacheRequestStruct) (*MemberClearCacheResponseStruct, error)
	ConfigGetList(context.Context, *ConfigGetListRequestStruct) (*ConfigGetListResponseStruct, error)
	ConfigGetOne(context.Context, *ConfigGetOneRequestStruct) (*ConfigGetOneResponseStruct, error)
	ConfigDeleteFromCacheByKey(context.Context, *ConfigDeleteFromCacheByKeyRequestStruct) (*ConfigDeleteFromCacheByKeyResponseStruct, error)
	ConfigClearCache(context.Context, *ConfigClearCacheRequestStruct) (*ConfigClearCacheResponseStruct, error)
}

// UnimplementedCompanyCacheServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyCacheServer struct {
}

func (*UnimplementedCompanyCacheServer) SessionGetInfo(context.Context, *SessionGetInfoRequestStruct) (*SessionGetInfoResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionGetInfo not implemented")
}
func (*UnimplementedCompanyCacheServer) SessionDeleteByUserId(context.Context, *SessionDeleteByUserIdRequestStruct) (*SessionDeleteByUserIdResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteByUserId not implemented")
}
func (*UnimplementedCompanyCacheServer) SessionDeleteBySessionUniq(context.Context, *SessionDeleteBySessionUniqRequestStruct) (*SessionDeleteBySessionUniqResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionDeleteBySessionUniq not implemented")
}
func (*UnimplementedCompanyCacheServer) SessionGetListByUserId(context.Context, *SessionGetListByUserIdRequestStruct) (*SessionGetListByUserIdResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionGetListByUserId not implemented")
}
func (*UnimplementedCompanyCacheServer) SessionClearCache(context.Context, *SessionClearCacheRequestStruct) (*SessionClearCacheResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionClearCache not implemented")
}
func (*UnimplementedCompanyCacheServer) SystemStatus(context.Context, *SystemStatusRequestStruct) (*SystemStatusResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemStatus not implemented")
}
func (*UnimplementedCompanyCacheServer) SystemTraceGoroutine(context.Context, *SystemTraceGoroutineRequestStruct) (*SystemTraceGoroutineResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemTraceGoroutine not implemented")
}
func (*UnimplementedCompanyCacheServer) SystemTraceMemory(context.Context, *SystemTraceMemoryRequestStruct) (*SystemTraceMemoryResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemTraceMemory not implemented")
}
func (*UnimplementedCompanyCacheServer) SystemCpuProfile(context.Context, *SystemCpuProfileRequestStruct) (*SystemCpuProfileResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCpuProfile not implemented")
}
func (*UnimplementedCompanyCacheServer) SystemReloadConfig(context.Context, *SystemReloadConfigRequestStruct) (*SystemReloadConfigResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemReloadConfig not implemented")
}
func (*UnimplementedCompanyCacheServer) SystemReloadSharding(context.Context, *SystemReloadShardingRequestStruct) (*SystemReloadShardingResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemReloadSharding not implemented")
}
func (*UnimplementedCompanyCacheServer) SystemCheckSharding(context.Context, *SystemCheckShardingRequestStruct) (*SystemCheckShardingResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemCheckSharding not implemented")
}
func (*UnimplementedCompanyCacheServer) MemberGetList(context.Context, *MemberGetListRequestStruct) (*MemberGetListResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberGetList not implemented")
}
func (*UnimplementedCompanyCacheServer) MemberGetShortList(context.Context, *MemberGetShortListRequestStruct) (*MemberGetShortListResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberGetShortList not implemented")
}
func (*UnimplementedCompanyCacheServer) MemberGetOne(context.Context, *MemberGetOneRequestStruct) (*MemberGetOneResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberGetOne not implemented")
}
func (*UnimplementedCompanyCacheServer) MemberDeleteFromCacheByUserId(context.Context, *MemberDeleteFromCacheByUserIdRequestStruct) (*MemberDeleteFromCacheByUserIdResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberDeleteFromCacheByUserId not implemented")
}
func (*UnimplementedCompanyCacheServer) MemberDeleteFromCacheByUserIdList(context.Context, *MemberDeleteFromCacheByUserIdListRequestStruct) (*MemberDeleteFromCacheByUserIdListResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberDeleteFromCacheByUserIdList not implemented")
}
func (*UnimplementedCompanyCacheServer) MemberClearCache(context.Context, *MemberClearCacheRequestStruct) (*MemberClearCacheResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberClearCache not implemented")
}
func (*UnimplementedCompanyCacheServer) ConfigGetList(context.Context, *ConfigGetListRequestStruct) (*ConfigGetListResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetList not implemented")
}
func (*UnimplementedCompanyCacheServer) ConfigGetOne(context.Context, *ConfigGetOneRequestStruct) (*ConfigGetOneResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetOne not implemented")
}
func (*UnimplementedCompanyCacheServer) ConfigDeleteFromCacheByKey(context.Context, *ConfigDeleteFromCacheByKeyRequestStruct) (*ConfigDeleteFromCacheByKeyResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigDeleteFromCacheByKey not implemented")
}
func (*UnimplementedCompanyCacheServer) ConfigClearCache(context.Context, *ConfigClearCacheRequestStruct) (*ConfigClearCacheResponseStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigClearCache not implemented")
}

func RegisterCompanyCacheServer(s *grpc.Server, srv CompanyCacheServer) {
	s.RegisterService(&_CompanyCache_serviceDesc, srv)
}

func _CompanyCache_SessionGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionGetInfoRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SessionGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SessionGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SessionGetInfo(ctx, req.(*SessionGetInfoRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SessionDeleteByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteByUserIdRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SessionDeleteByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SessionDeleteByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SessionDeleteByUserId(ctx, req.(*SessionDeleteByUserIdRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SessionDeleteBySessionUniq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteBySessionUniqRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SessionDeleteBySessionUniq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SessionDeleteBySessionUniq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SessionDeleteBySessionUniq(ctx, req.(*SessionDeleteBySessionUniqRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SessionGetListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionGetListByUserIdRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SessionGetListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SessionGetListByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SessionGetListByUserId(ctx, req.(*SessionGetListByUserIdRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SessionClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionClearCacheRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SessionClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SessionClearCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SessionClearCache(ctx, req.(*SessionClearCacheRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStatusRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SystemStatus(ctx, req.(*SystemStatusRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SystemTraceGoroutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTraceGoroutineRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SystemTraceGoroutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SystemTraceGoroutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SystemTraceGoroutine(ctx, req.(*SystemTraceGoroutineRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SystemTraceMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTraceMemoryRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SystemTraceMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SystemTraceMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SystemTraceMemory(ctx, req.(*SystemTraceMemoryRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SystemCpuProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCpuProfileRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SystemCpuProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SystemCpuProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SystemCpuProfile(ctx, req.(*SystemCpuProfileRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SystemReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemReloadConfigRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SystemReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SystemReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SystemReloadConfig(ctx, req.(*SystemReloadConfigRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SystemReloadSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemReloadShardingRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SystemReloadSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SystemReloadSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SystemReloadSharding(ctx, req.(*SystemReloadShardingRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_SystemCheckSharding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCheckShardingRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).SystemCheckSharding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/SystemCheckSharding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).SystemCheckSharding(ctx, req.(*SystemCheckShardingRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_MemberGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberGetListRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).MemberGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/MemberGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).MemberGetList(ctx, req.(*MemberGetListRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_MemberGetShortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberGetShortListRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).MemberGetShortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/MemberGetShortList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).MemberGetShortList(ctx, req.(*MemberGetShortListRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_MemberGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberGetOneRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).MemberGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/MemberGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).MemberGetOne(ctx, req.(*MemberGetOneRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_MemberDeleteFromCacheByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberDeleteFromCacheByUserIdRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).MemberDeleteFromCacheByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/MemberDeleteFromCacheByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).MemberDeleteFromCacheByUserId(ctx, req.(*MemberDeleteFromCacheByUserIdRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_MemberDeleteFromCacheByUserIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberDeleteFromCacheByUserIdListRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).MemberDeleteFromCacheByUserIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/MemberDeleteFromCacheByUserIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).MemberDeleteFromCacheByUserIdList(ctx, req.(*MemberDeleteFromCacheByUserIdListRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_MemberClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberClearCacheRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).MemberClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/MemberClearCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).MemberClearCache(ctx, req.(*MemberClearCacheRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_ConfigGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetListRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).ConfigGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/ConfigGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).ConfigGetList(ctx, req.(*ConfigGetListRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_ConfigGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetOneRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).ConfigGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/ConfigGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).ConfigGetOne(ctx, req.(*ConfigGetOneRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_ConfigDeleteFromCacheByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDeleteFromCacheByKeyRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).ConfigDeleteFromCacheByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/ConfigDeleteFromCacheByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).ConfigDeleteFromCacheByKey(ctx, req.(*ConfigDeleteFromCacheByKeyRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyCache_ConfigClearCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigClearCacheRequestStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCacheServer).ConfigClearCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/companyCacheGrpc.companyCache/ConfigClearCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCacheServer).ConfigClearCache(ctx, req.(*ConfigClearCacheRequestStruct))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "companyCacheGrpc.companyCache",
	HandlerType: (*CompanyCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionGetInfo",
			Handler:    _CompanyCache_SessionGetInfo_Handler,
		},
		{
			MethodName: "SessionDeleteByUserId",
			Handler:    _CompanyCache_SessionDeleteByUserId_Handler,
		},
		{
			MethodName: "SessionDeleteBySessionUniq",
			Handler:    _CompanyCache_SessionDeleteBySessionUniq_Handler,
		},
		{
			MethodName: "SessionGetListByUserId",
			Handler:    _CompanyCache_SessionGetListByUserId_Handler,
		},
		{
			MethodName: "SessionClearCache",
			Handler:    _CompanyCache_SessionClearCache_Handler,
		},
		{
			MethodName: "SystemStatus",
			Handler:    _CompanyCache_SystemStatus_Handler,
		},
		{
			MethodName: "SystemTraceGoroutine",
			Handler:    _CompanyCache_SystemTraceGoroutine_Handler,
		},
		{
			MethodName: "SystemTraceMemory",
			Handler:    _CompanyCache_SystemTraceMemory_Handler,
		},
		{
			MethodName: "SystemCpuProfile",
			Handler:    _CompanyCache_SystemCpuProfile_Handler,
		},
		{
			MethodName: "SystemReloadConfig",
			Handler:    _CompanyCache_SystemReloadConfig_Handler,
		},
		{
			MethodName: "SystemReloadSharding",
			Handler:    _CompanyCache_SystemReloadSharding_Handler,
		},
		{
			MethodName: "SystemCheckSharding",
			Handler:    _CompanyCache_SystemCheckSharding_Handler,
		},
		{
			MethodName: "MemberGetList",
			Handler:    _CompanyCache_MemberGetList_Handler,
		},
		{
			MethodName: "MemberGetShortList",
			Handler:    _CompanyCache_MemberGetShortList_Handler,
		},
		{
			MethodName: "MemberGetOne",
			Handler:    _CompanyCache_MemberGetOne_Handler,
		},
		{
			MethodName: "MemberDeleteFromCacheByUserId",
			Handler:    _CompanyCache_MemberDeleteFromCacheByUserId_Handler,
		},
		{
			MethodName: "MemberDeleteFromCacheByUserIdList",
			Handler:    _CompanyCache_MemberDeleteFromCacheByUserIdList_Handler,
		},
		{
			MethodName: "MemberClearCache",
			Handler:    _CompanyCache_MemberClearCache_Handler,
		},
		{
			MethodName: "ConfigGetList",
			Handler:    _CompanyCache_ConfigGetList_Handler,
		},
		{
			MethodName: "ConfigGetOne",
			Handler:    _CompanyCache_ConfigGetOne_Handler,
		},
		{
			MethodName: "ConfigDeleteFromCacheByKey",
			Handler:    _CompanyCache_ConfigDeleteFromCacheByKey_Handler,
		},
		{
			MethodName: "ConfigClearCache",
			Handler:    _CompanyCache_ConfigClearCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/go_company_cache.proto",
}
